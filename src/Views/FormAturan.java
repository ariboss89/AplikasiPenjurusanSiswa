/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Views;

import Service.AturanServiceImpl;
import Service.TableServiceImpl;
import Interface.IAturanService;
import Interface.IHasilService;
import Interface.ITableService;
import Models.AturanEntropi;
import Models.AturanEntropiNol;
import Models.Rules;
import Models.aturan;
import Models.gain;
import Models.ipa;
import Models.ips;
import Models.mtk;
import Models.tb_rules;
import Service.HasilServiceImpl;
import java.awt.List;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Objects;
import java.util.stream.Collectors;
import static java.util.stream.Collectors.toCollection;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ariboss89
 */
public class FormAturan extends javax.swing.JFrame {

    /**
     * Creates new form FormAturan
     */
    IAturanService ia = new AturanServiceImpl();
    ITableService it = new TableServiceImpl();
    IHasilService ih = new HasilServiceImpl();

    private String rss[][];
    String[] namaKolom = {"Id Minat", "Nama Siswa", "Atribut", "Nilai Angka", "Nilai Huruf", "Minat", "Id Siswa"};
    int jmlKolom = namaKolom.length;
    int[] lebar = {200, 500, 500, 400, 300, 400, 400};

    private String rssAturan[][];
    String[] namaKolomAturan = {"Id Rules", "Rules", "Then"};
    int jmlKolomAturan = namaKolomAturan.length;
    int[] lebarAturan = {200, 500, 500};

    mtk mtk = new mtk();
    ipa ipa = new ipa();
    ips ips = new ips();

    ArrayList<mtk> listMtk = new ArrayList<mtk>();
    ArrayList<ipa> listIpa = new ArrayList<ipa>();
    ArrayList<ips> listIps = new ArrayList<ips>();

    ArrayList<mtk> listMtkNol = new ArrayList<mtk>();
    ArrayList<ipa> listIpaNol = new ArrayList<ipa>();
    ArrayList<ips> listIpsNol = new ArrayList<ips>();

    public FormAturan() {
        initComponents();
        setLocationRelativeTo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        caseMTKA = new javax.swing.JTextField();
        caseMTKB = new javax.swing.JTextField();
        caseMTKC = new javax.swing.JTextField();
        caseMTKAIPA = new javax.swing.JTextField();
        caseMTKAIPS = new javax.swing.JTextField();
        caseMTKBIPA = new javax.swing.JTextField();
        caseMTKBIPS = new javax.swing.JTextField();
        caseMTKCIPS = new javax.swing.JTextField();
        caseMTKCIPA = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        caseMTKAEntropi = new javax.swing.JTextField();
        caseMTKBEntropi = new javax.swing.JTextField();
        caseMTKCEntropi = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        caseMTKGain = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        caseIPAA = new javax.swing.JTextField();
        caseIPAB = new javax.swing.JTextField();
        caseIPAC = new javax.swing.JTextField();
        caseIPAAIPA = new javax.swing.JTextField();
        caseIPAAIPS = new javax.swing.JTextField();
        caseIPABIPA = new javax.swing.JTextField();
        caseIPABIPS = new javax.swing.JTextField();
        caseIPACIPS = new javax.swing.JTextField();
        caseIPACIPA = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        caseIpaAEntropi = new javax.swing.JTextField();
        caseIpaBEntropi = new javax.swing.JTextField();
        caseIpaCEntropi = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        caseIPAGain = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        caseIPSA = new javax.swing.JTextField();
        caseIPSB = new javax.swing.JTextField();
        caseIPSC = new javax.swing.JTextField();
        caseIPSAIPA = new javax.swing.JTextField();
        caseIPSAIPS = new javax.swing.JTextField();
        caseIPSBIPA = new javax.swing.JTextField();
        caseIPSBIPS = new javax.swing.JTextField();
        caseIPSCIPS = new javax.swing.JTextField();
        caseIPSCIPA = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        caseIPSAEntropi = new javax.swing.JTextField();
        caseIPSBEntropi = new javax.swing.JTextField();
        caseIPSCEntropi = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        caseIPSGain = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        totIPA = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        totIPS = new javax.swing.JTextField();
        total = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        entropiTotal = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        nodeAkar = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        atributAkar = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        lblKet = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        txtTotIpa = new javax.swing.JTextField();
        txtTotIps = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        txtEntropi = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        lblKet2 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable7 = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTable8 = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        txtTotal2 = new javax.swing.JTextField();
        txtTotIps2 = new javax.swing.JTextField();
        txtTotIpa2 = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        txtEntropi2 = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel14 = new javax.swing.JPanel();
        jLabel44 = new javax.swing.JLabel();
        cbAtribut1 = new javax.swing.JComboBox<>();
        cbAtribut3 = new javax.swing.JComboBox<>();
        cbAribut2 = new javax.swing.JComboBox<>();
        jLabel45 = new javax.swing.JLabel();
        cbMinat = new javax.swing.JComboBox<>();
        btnTambahAturan = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTable11 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("MENGHITUNG ENTROPI");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1036, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton1))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("FORM 1", jPanel2);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("MTK");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("A");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("B");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("C");

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("JUMLAH KASUS");

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("IPA");

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("IPS");

        caseMTKA.setEditable(false);

        caseMTKB.setEditable(false);

        caseMTKC.setEditable(false);

        caseMTKAIPA.setEditable(false);

        caseMTKAIPS.setEditable(false);

        caseMTKBIPA.setEditable(false);

        caseMTKBIPS.setEditable(false);

        caseMTKCIPS.setEditable(false);

        caseMTKCIPA.setEditable(false);

        jLabel23.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("ENRTROPI");

        caseMTKAEntropi.setEditable(false);

        caseMTKBEntropi.setEditable(false);

        caseMTKCEntropi.setEditable(false);

        jLabel24.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel24.setText("GAIN");

        caseMTKGain.setEditable(false);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(caseMTKA)
                    .addComponent(caseMTKB)
                    .addComponent(caseMTKC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(caseMTKAIPA)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(caseMTKBIPA)
                    .addComponent(caseMTKCIPA))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(caseMTKAIPS, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseMTKCIPS, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseMTKBIPS, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                    .addComponent(caseMTKAEntropi)
                    .addComponent(caseMTKBEntropi)
                    .addComponent(caseMTKCEntropi))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(caseMTKGain))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel23)
                    .addComponent(jLabel24))
                .addGap(11, 11, 11)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(caseMTKA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseMTKAIPA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseMTKAIPS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseMTKAEntropi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseMTKGain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(caseMTKB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseMTKBIPA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseMTKBIPS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseMTKBEntropi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(caseMTKCIPA)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(caseMTKC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(caseMTKCEntropi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(caseMTKCIPS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jLabel22.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("IPA");

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel25.setText("A");

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("B");

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel27.setText("C");

        jLabel28.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel28.setText("JUMLAH KASUS");

        jLabel29.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel29.setText("IPA");

        jLabel30.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel30.setText("IPS");

        caseIPAA.setEditable(false);

        caseIPAB.setEditable(false);

        caseIPAC.setEditable(false);

        caseIPAAIPA.setEditable(false);

        caseIPAAIPS.setEditable(false);

        caseIPABIPA.setEditable(false);

        caseIPABIPS.setEditable(false);

        caseIPACIPS.setEditable(false);

        caseIPACIPA.setEditable(false);

        jLabel31.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel31.setText("ENRTROPI");

        caseIpaAEntropi.setEditable(false);
        caseIpaAEntropi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                caseIpaAEntropiActionPerformed(evt);
            }
        });

        caseIpaBEntropi.setEditable(false);

        caseIpaCEntropi.setEditable(false);

        jLabel32.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel32.setText("GAIN");

        caseIPAGain.setEditable(false);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(caseIPAA)
                            .addComponent(caseIPAB, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(caseIPABIPA, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(caseIPABIPS, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(caseIpaBEntropi))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(caseIPAAIPA, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(caseIPAAIPS, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(caseIpaAEntropi, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(caseIPAC, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(caseIPACIPA, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(caseIPACIPS, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(caseIpaCEntropi)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel32, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                    .addComponent(caseIPAGain))
                .addGap(0, 0, 0))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(jLabel28)
                    .addComponent(jLabel29)
                    .addComponent(jLabel30)
                    .addComponent(jLabel31)
                    .addComponent(jLabel32))
                .addGap(11, 11, 11)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(caseIPAA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseIPAAIPA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseIPAAIPS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseIpaAEntropi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseIPAGain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(caseIPAB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseIPABIPA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseIPABIPS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseIpaBEntropi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(caseIPAC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseIPACIPS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseIPACIPA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseIpaCEntropi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jLabel33.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel33.setText("IPS");

        jLabel34.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel34.setText("A");

        jLabel35.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel35.setText("B");

        jLabel36.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel36.setText("C");

        jLabel37.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel37.setText("JUMLAH KASUS");

        jLabel38.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel38.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel38.setText("IPA");

        jLabel39.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel39.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel39.setText("IPS");

        caseIPSA.setEditable(false);

        caseIPSB.setEditable(false);

        caseIPSC.setEditable(false);

        caseIPSAIPA.setEditable(false);

        caseIPSAIPS.setEditable(false);

        caseIPSBIPA.setEditable(false);

        caseIPSBIPS.setEditable(false);

        caseIPSCIPS.setEditable(false);

        caseIPSCIPA.setEditable(false);

        jLabel40.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel40.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel40.setText("ENRTROPI");

        caseIPSAEntropi.setEditable(false);

        caseIPSBEntropi.setEditable(false);

        caseIPSCEntropi.setEditable(false);

        jLabel41.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel41.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel41.setText("GAIN");

        caseIPSGain.setEditable(false);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel35, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel34, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel33, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel36, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel37, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(caseIPSA)
                    .addComponent(caseIPSB)
                    .addComponent(caseIPSC, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(caseIPSBIPA)
                    .addComponent(caseIPSAIPA)
                    .addComponent(caseIPSCIPA)
                    .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(caseIPSBIPS)
                    .addComponent(caseIPSCIPS)
                    .addComponent(jLabel39, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(caseIPSAIPS, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel40, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                    .addComponent(caseIPSCEntropi)
                    .addComponent(caseIPSBEntropi)
                    .addComponent(caseIPSAEntropi))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel41, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(caseIPSGain)
                        .addContainerGap())))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(jLabel37)
                    .addComponent(jLabel38)
                    .addComponent(jLabel39)
                    .addComponent(jLabel40)
                    .addComponent(jLabel41))
                .addGap(11, 11, 11)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(caseIPSA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseIPSAIPA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseIPSAIPS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseIPSAEntropi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseIPSGain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(caseIPSB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseIPSBIPA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseIPSBIPS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseIPSBEntropi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(caseIPSC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseIPSCIPS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseIPSCIPA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caseIPSCEntropi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel8.setText("TOTAL KASUS IPA");

        jLabel9.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel9.setText("TOTAL KASUS IPS");

        jLabel10.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel10.setText("TOTAL KASUS");

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel11.setText("ENTROPI TOTAL");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(totIPA)
                    .addComponent(totIPS)
                    .addComponent(total)
                    .addComponent(entropiTotal)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(totIPA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(totIPS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(entropiTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel8.setBackground(new java.awt.Color(255, 204, 153));

        jLabel12.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel12.setText("NODE AKAR");

        jLabel13.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel13.setText("ATRIBUT AKAR");

        jLabel14.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("GAIN TERTINGGI");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nodeAkar)
                    .addComponent(atributAkar)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nodeAkar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(atributAkar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("HITUNG ENTROPI", jPanel4);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MAPEL", "Atribut", "Jumlah Kasus", "IPA", "IPS", "ENTROPI", "GAIN"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MAPEL", "Atribut", "Jumlah Kasus"
            }
        ));
        jScrollPane3.setViewportView(jTable3);

        lblKet.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblKet.setText("MENCARI ENTROPI DAN GAIN TERHADAP ");

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MAPEL", "ENTROPI"
            }
        ));
        jScrollPane4.setViewportView(jTable4);

        jLabel15.setText("TOTAL IPA");

        jLabel16.setText("TOTAL IPS");

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("TOTAL");

        jLabel18.setText("ENTROPI");

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ATRIBUT", "GAIN"
            }
        ));
        jScrollPane5.setViewportView(jTable5);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(lblKet, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel11Layout.createSequentialGroup()
                                        .addComponent(jLabel15)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel16))
                                    .addGroup(jPanel11Layout.createSequentialGroup()
                                        .addComponent(txtTotIpa, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtTotIps, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                                    .addGroup(jPanel11Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(txtTotal))))
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(txtEntropi)))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblKet)
                .addGap(27, 27, 27)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTotIpa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTotIps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtEntropi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("POHON KEPUTUSAN ", jPanel11);

        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MAPEL", "ATRIBUT", "JUMLAH KASUS"
            }
        ));
        jScrollPane6.setViewportView(jTable6);

        lblKet2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblKet2.setText("MENCARI ENTROPI DAN GAIN TERHADAP ");

        jTable7.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MAPEL", "ENTROPI"
            }
        ));
        jScrollPane7.setViewportView(jTable7);

        jTable8.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ATRIBUT", "GAIN"
            }
        ));
        jScrollPane8.setViewportView(jTable8);

        jLabel19.setText("TOTAL IPA");

        jLabel20.setText("TOTAL IPS");

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("TOTAL");

        txtTotal2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotal2ActionPerformed(evt);
            }
        });

        jLabel42.setText("ENTROPI");

        jLabel43.setText("LIST ATURAN");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane9.setViewportView(jTextArea1);

        jPanel14.setBackground(new java.awt.Color(255, 255, 255));

        jLabel44.setText("TAMBAH RULES");

        cbAtribut1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PILIH ATRIBUT 1", "IPAA", "IPAB", "IPAC", "MTKA", "MTKB", "MTKC", "IPSA", "IPSB", "IPSC" }));

        cbAtribut3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PILIH ATRIBUT 3", "IPAA", "IPAB", "IPAC", "MTKA", "MTKB", "MTKC", "IPSA", "IPSB", "IPSC" }));

        cbAribut2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PILIH ATRIBUT 2", "IPAA", "IPAB", "IPAC", "MTKA", "MTKB", "MTKC", "IPSA", "IPSB", "IPSC" }));

        jLabel45.setText("MINAT");

        cbMinat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PILIH", "IPA", "IPS" }));

        btnTambahAturan.setText("TAMBAH");
        btnTambahAturan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahAturanActionPerformed(evt);
            }
        });

        jTable11.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane11.setViewportView(jTable11);

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane11)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel14Layout.createSequentialGroup()
                                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel14Layout.createSequentialGroup()
                                        .addComponent(cbAtribut1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbAribut2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbAtribut3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel44))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel45)
                                    .addComponent(cbMinat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(btnTambahAturan))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel44)
                    .addComponent(jLabel45))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbAtribut1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbAtribut3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbAribut2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbMinat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnTambahAturan)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblKet2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addComponent(jLabel43)
                                .addGap(340, 340, 340)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                                        .addComponent(jLabel19)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel20))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                                        .addComponent(txtTotIpa2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtTotIps2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtTotal2)
                                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel12Layout.createSequentialGroup()
                                        .addComponent(jLabel42)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(txtEntropi2)))
                            .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblKet2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(jLabel20))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTotIps2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTotIpa2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTotal2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel42)
                        .addGap(18, 18, 18)
                        .addComponent(txtEntropi2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel43)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane9))
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("POHON KEPUTUSAN 2", jPanel12);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        rss = ia.ShowDataMinat();
        it.SetTable(jTable1, rss, namaKolom, jmlKolom, lebar);

        rssAturan = ih.Show();
        it.SetTable(jTable11, rssAturan, namaKolomAturan, jmlKolomAturan, lebarAturan);

    }//GEN-LAST:event_formWindowActivated

    private void btnTambahAturanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahAturanActionPerformed
        // TODO add your handling code here:
        ArrayList<String> listRules = new ArrayList<>();

        String atr1 = cbAtribut1.getSelectedItem().toString().trim();
        String atr2 = cbAribut2.getSelectedItem().toString().trim();
        String atr3 = cbAtribut3.getSelectedItem().toString().trim();
        String minat = cbMinat.getSelectedItem().toString().trim();
        String rules = "";

        if (cbMinat.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "SILAHKAN PILIH MINAT !!");
        } else {

            if (!atr1.equals("PILIH ATRIBUT 1") && atr2.equals("PILIH ATRIBUT 2") && atr3.equals("PILIH ATRIBUT 3") && !minat.equals("PILIH")) {

                rules += atr1;

                ih.Save(ih.IdRules(), rules, minat);

            } else if (!atr1.equals("PILIH ATRIBUT 1") && !atr2.equals("PILIH ATRIBUT 2") && atr3.equals("PILIH ATRIBUT 3") && !minat.equals("PILIH")) {

                rules += atr1 + "," + atr2;

                ih.Save(ih.IdRules(), rules, minat);

            } else if (!atr1.equals("PILIH ATRIBUT 1") && !atr2.equals("PILIH ATRIBUT 2") && !atr3.equals("PILIH ATRIBUT 3") && !minat.equals("PILIH")) {

                rules += atr1 + "," + atr2 + "," + atr3;

                ih.Save(ih.IdRules(), rules, minat);

            }
        }
    }//GEN-LAST:event_btnTambahAturanActionPerformed

    private void txtTotal2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotal2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotal2ActionPerformed

    private void caseIpaAEntropiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_caseIpaAEntropiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_caseIpaAEntropiActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        Rules rules = new Rules();
        ArrayList<String> listRules = new ArrayList<>();

        double log2 = 0.3;
        ArrayList<Integer> listNilai = new ArrayList<Integer>();
        ArrayList<aturan> listAturan = new ArrayList<aturan>();
        aturan aturanx = new aturan();

        String arrAtribut = "MTK,IPA,IPS";
        String arrHuruf = "A,B,C";
        String arrMinat = "IPA,IPS";

        String[] atr = arrAtribut.split(",", -1);
        String[] huruf = arrHuruf.split(",", -1);
        String[] minat = arrMinat.split(",", -1);

        String[][] arrNilai = new String[2][9];

        for (int i = 0; i < minat.length; i++) {

            for (int j = 0; j < huruf.length; j++) {

                //String atribut = atr[j];
                String hrf = huruf[j];
                String mnt = minat[i];

                for (int k = 0; k < atr.length; k++) {

                    String atribut = atr[j];
                    String hurf = atribut + huruf[k];

                    int countAtr = ia.Kasus(atribut, hurf, mnt);

                    String countAtribut = String.valueOf(countAtr);

                    //arrNilai[i][k] = countAtribut;
                    listNilai.add(countAtr);

                }
            }
        }

        int sizeList = listNilai.size();

        caseMTKAIPA.setText(String.valueOf(listNilai.get(0)));
        caseMTKBIPA.setText(String.valueOf(listNilai.get(1)));
        caseMTKCIPA.setText(String.valueOf(listNilai.get(2)));

        caseMTKAIPS.setText(String.valueOf(listNilai.get(9)));
        caseMTKBIPS.setText(String.valueOf(listNilai.get(10)));
        caseMTKCIPS.setText(String.valueOf(listNilai.get(11)));

        caseIPAAIPA.setText(String.valueOf(listNilai.get(3)));
        caseIPABIPA.setText(String.valueOf(listNilai.get(4)));
        caseIPACIPA.setText(String.valueOf(listNilai.get(5)));

        caseIPAAIPS.setText(String.valueOf(listNilai.get(12)));
        caseIPABIPS.setText(String.valueOf(listNilai.get(13)));
        caseIPACIPS.setText(String.valueOf(listNilai.get(14)));

        caseIPSAIPA.setText(String.valueOf(listNilai.get(6)));
        caseIPSBIPA.setText(String.valueOf(listNilai.get(7)));
        caseIPSCIPA.setText(String.valueOf(listNilai.get(8)));

        caseIPSAIPS.setText(String.valueOf(listNilai.get(15)));
        caseIPSBIPS.setText(String.valueOf(listNilai.get(16)));
        caseIPSCIPS.setText(String.valueOf(listNilai.get(17)));

        int mtkAIPA = Integer.parseInt(caseMTKAIPA.getText());
        int mtkAIPS = Integer.parseInt(caseMTKAIPS.getText());
        int mtkATotal = mtkAIPA + mtkAIPS;
        caseMTKA.setText(String.valueOf(mtkATotal));

        int mtkBIPA = Integer.parseInt(caseMTKBIPA.getText());
        int mtkBIPS = Integer.parseInt(caseMTKBIPS.getText());
        int mtkBTotal = mtkBIPA + mtkBIPS;
        caseMTKB.setText(String.valueOf(mtkBTotal));

        int mtkCIPA = Integer.parseInt(caseMTKCIPA.getText());
        int mtkCIPS = Integer.parseInt(caseMTKCIPS.getText());
        int mtkCTotal = mtkCIPA + mtkCIPS;
        caseMTKC.setText(String.valueOf(mtkCTotal));

        int ipaAIPA = Integer.parseInt(caseIPAAIPA.getText());
        int ipaAIPS = Integer.parseInt(caseIPAAIPS.getText());
        int ipaATotal = ipaAIPA + ipaAIPS;
        caseIPAA.setText(String.valueOf(ipaATotal));

        int ipaBIPA = Integer.parseInt(caseIPABIPA.getText());
        int ipaBIPS = Integer.parseInt(caseIPABIPS.getText());
        int ipaBTotal = ipaBIPA + ipaBIPS;
        caseIPAB.setText(String.valueOf(ipaBTotal));

        int ipaCIPA = Integer.parseInt(caseIPACIPA.getText());
        int ipaCIPS = Integer.parseInt(caseIPACIPS.getText());
        int ipaCTotal = ipaCIPA + ipaCIPS;
        caseIPAC.setText(String.valueOf(ipaCTotal));

        int ipsAIPA = Integer.parseInt(caseIPSAIPA.getText());
        int ipsAIPS = Integer.parseInt(caseIPSAIPS.getText());
        int ipsATotal = ipsAIPA + ipsAIPS;
        caseIPSA.setText(String.valueOf(ipsATotal));

        int ipsBIPA = Integer.parseInt(caseIPSBIPA.getText());
        int ipsBIPS = Integer.parseInt(caseIPSBIPS.getText());
        int ipsBTotal = ipsBIPA + ipsBIPS;
        caseIPSB.setText(String.valueOf(ipsBTotal));

        int ipsCIPA = Integer.parseInt(caseIPSCIPA.getText());
        int ipsCIPS = Integer.parseInt(caseIPSCIPS.getText());
        int ipsCTotal = ipsCIPA + ipsCIPS;
        caseIPSC.setText(String.valueOf(ipsCTotal));

        float totMTKAIPA = ((float) mtkAIPA) / mtkATotal;
        float totMTKAIPS = ((float) mtkAIPS) / mtkATotal;

        double logMTKAIPA = Math.log10(totMTKAIPA) / 0.3;
        double logMTKAIPS = Math.log10(totMTKAIPS) / 0.3;

        double entropiMTKA = ((-(totMTKAIPA) * (logMTKAIPA)) + (-(totMTKAIPS * logMTKAIPS)));

        caseMTKAEntropi.setText(String.valueOf(entropiMTKA));

        //ENTROPI MTKB
        float totMTKBIPA = ((float) mtkBIPA) / mtkBTotal;
        float totMTKBIPS = ((float) mtkBIPS) / mtkBTotal;

        double logMTKBIPA = Math.log10(totMTKBIPA) / 0.3;
        double logMTKBIPS = Math.log10(totMTKBIPS) / 0.3;

        double entropiMTKB = ((-(totMTKBIPA) * (logMTKBIPA)) + (-(totMTKBIPS * logMTKBIPS)));

        caseMTKBEntropi.setText(String.valueOf(entropiMTKB));

        //ENTROPI MTKC
        float totMTKCIPA = ((float) mtkCIPA) / mtkCTotal;
        float totMTKCIPS = ((float) mtkCIPS) / mtkCTotal;

        double logMTKCIPA = Math.log10(totMTKCIPA) / 0.3;
        double logMTKCIPS = Math.log10(totMTKCIPS) / 0.3;

        double entropiMTKC = ((-(totMTKCIPA) * (logMTKCIPA)) + (-(totMTKCIPS * logMTKCIPS)));

        caseMTKCEntropi.setText(String.valueOf(entropiMTKC));

        //ENTROPI IPA A
        float totIPAAIPA = ((float) ipaAIPA) / ipaATotal;
        float totIPAAIPS = ((float) ipaAIPS) / ipaATotal;

        double logIPAAIPA = Math.log10(totIPAAIPA) / 0.3;
        double logIPAAIPS = Math.log10(totIPAAIPS) / 0.3;

        double entropiIPAA = ((-(totIPAAIPA) * (logIPAAIPA)) + (-(totIPAAIPS * logIPAAIPS)));

        caseIpaAEntropi.setText(String.valueOf(entropiIPAA));

        //entropi ipa b
        float totIPABIPA = ((float) ipaBIPA) / ipaBTotal;
        float totIPABIPS = ((float) ipaBIPS) / ipaBTotal;

        double logIPABIPA = Math.log10(totIPABIPA) / 0.3;
        double logIPABIPS = Math.log10(totIPABIPS) / 0.3;

        double entropiIPAB = ((-(totIPABIPA) * (logIPABIPA)) + (-(totIPABIPS * logIPABIPS)));

        caseIpaBEntropi.setText(String.valueOf(entropiIPAB));

        //ENTROPI IPA C
        float totIPACIPA = ((float) ipaCIPA) / ipaCTotal;
        float totIPACIPS = ((float) ipaCIPS) / ipaCTotal;

        double logIPACIPA = Math.log10(totIPACIPA) / 0.3;
        double logIPACIPS = Math.log10(totIPACIPS) / 0.3;

        double entropiIPAC = ((-(totIPACIPA) * (logIPACIPA)) + (-(totIPACIPS * logIPACIPS)));

        caseIpaCEntropi.setText(String.valueOf(entropiIPAC));

        //ENTROPI IPS A
        float totIPSAIPA = ((float) ipsAIPA) / ipsATotal;
        float totIPSAIPS = ((float) ipsAIPS) / ipsATotal;

        double logIPSAIPA = Math.log10(totIPSAIPA) / 0.3;
        double logIPSAIPS = Math.log10(totIPSAIPS) / 0.3;

        double entropiIPSA = ((-(totIPSAIPA) * (logIPSAIPA)) + (-(totIPSAIPS * logIPSAIPS)));

        caseIPSAEntropi.setText(String.valueOf(entropiIPSA));

        //entropi ips b
        float totIPSBIPA = ((float) ipsBIPA) / ipsBTotal;
        float totIPSBIPS = ((float) ipsBIPS) / ipsBTotal;

        double logIPSBIPA = Math.log10(totIPSBIPA) / 0.3;
        double logIPSBIPS = Math.log10(totIPSBIPS) / 0.3;

        double entropiIPSB = ((-(totIPSBIPA) * (logIPSBIPA)) + (-(totIPSBIPS * logIPSBIPS)));

        caseIPSBEntropi.setText(String.valueOf(entropiIPSB));

        //entropi ips c
        float totIPSCIPA = ((float) ipsCIPA) / ipsCTotal;
        float totIPSCIPS = ((float) ipsCIPS) / ipsCTotal;

        double logIPSCIPA = Math.log10(totIPSCIPA) / 0.3;
        double logIPSCIPS = Math.log10(totIPSCIPS) / 0.3;

        double entropiIPSC = ((-(totIPSCIPA) * (logIPSCIPA)) + (-(totIPSCIPS * logIPSCIPS)));

        caseIPSCEntropi.setText(String.valueOf(entropiIPSC));

        //total && entropi total
        String mint = "IPA,IPS";
        String[] arrMint = mint.split(",", -1);
        int totalx = 0;

        for (int a = 0; a < arrMint.length; a++) {
            totalx += ia.TotalKasus(arrMint[a]);

            total.setText(String.valueOf(totalx));
        }

        int IPAtot = ia.TotalKasus("IPA");
        int IPStot = ia.TotalKasus("IPS");
        int tot = Integer.parseInt(total.getText());

        totIPA.setText(String.valueOf(IPAtot));
        totIPS.setText(String.valueOf(IPStot));

        float totIPA = ((float) IPAtot) / tot;
        float totIPS = ((float) IPStot) / tot;

        double logIPA = Math.log10(0.7) / 0.3;
        double logIPS = Math.log10(0.3) / 0.3;

        double entropiTot = ((-(totIPA) * (logIPA)) + (-(totIPS * logIPS)));

        entropiTotal.setText(String.valueOf(entropiTot));

        if (caseMTKAEntropi.getText().equals("NaN")) {
            caseMTKAEntropi.setText("0");
        }

        if (caseMTKBEntropi.getText().equals("NaN")) {
            caseMTKBEntropi.setText("0");
        }

        if (caseMTKCEntropi.getText().equals("NaN")) {
            caseMTKCEntropi.setText("0");
        }

        if (caseIpaAEntropi.getText().equals("NaN")) {
            caseIpaAEntropi.setText("0");
        }

        if (caseIpaBEntropi.getText().equals("NaN")) {
            caseIpaBEntropi.setText("0");
        }

        if (caseIpaCEntropi.getText().equals("NaN")) {
            caseIpaCEntropi.setText("0");
        }

        if (caseIPSAEntropi.getText().equals("NaN")) {
            caseIPSAEntropi.setText("0");
        }

        if (caseIPSBEntropi.getText().equals("NaN")) {
            caseIPSBEntropi.setText("0");
        }

        if (caseIPSCEntropi.getText().equals("NaN")) {
            caseIPSCEntropi.setText("0");
        }

        //Menghitung GAIN
        double entpTot = Double.parseDouble(entropiTotal.getText());
        double caseTotal = Double.parseDouble(total.getText());

        double caseMtkA = Double.parseDouble(caseMTKA.getText());
        double caseMtkB = Double.parseDouble(caseMTKB.getText());
        double caseMtkC = Double.parseDouble(caseMTKC.getText());
        double entpMtkA = Double.parseDouble(caseMTKAEntropi.getText());
        double entpMtkB = Double.parseDouble(caseMTKBEntropi.getText());
        double entpMtkC = Double.parseDouble(caseMTKCEntropi.getText());

        double caseIpaA = Double.parseDouble(caseIPAA.getText());
        double caseIpaB = Double.parseDouble(caseIPAB.getText());
        double caseIpaC = Double.parseDouble(caseIPAC.getText());
        double entpIpaA = Double.parseDouble(caseIpaAEntropi.getText());
        double entpIpaB = Double.parseDouble(caseIpaBEntropi.getText());
        double entpIpaC = Double.parseDouble(caseIpaCEntropi.getText());

        double caseIpsA = Double.parseDouble(caseIPSA.getText());
        double caseIpsB = Double.parseDouble(caseIPSB.getText());
        double caseIpsC = Double.parseDouble(caseIPSC.getText());
        double entpIpsA = Double.parseDouble(caseIPSAEntropi.getText());
        double entpIpsB = Double.parseDouble(caseIPSBEntropi.getText());
        double entpIpsC = Double.parseDouble(caseIPSCEntropi.getText());

        //
        double MTKA = ((caseMtkA / caseTotal) * entropiMTKA);
        double MTKB = ((caseMtkB / caseTotal) * entropiMTKB);
        double MTKC = ((caseMtkC / caseTotal) * entropiMTKC);

        if (String.valueOf(MTKA).equals("NaN")) {
            MTKA = 0.0;
        }

        if (String.valueOf(MTKB).equals("NaN")) {
            MTKB = 0.0;
        }

        if (String.valueOf(MTKC).equals("NaN")) {
            MTKC = 0.0;
        }

        double gainMTK = entpTot - ((MTKA + MTKB + MTKC));
        caseMTKGain.setText(String.valueOf(gainMTK));

        double IPAA = ((caseIpaA / caseTotal) * entropiIPAA);
        double IPAB = ((caseIpaB / caseTotal) * entropiIPAB);
        double IPAC = ((caseIpaC / caseTotal) * entropiIPAC);

        if (String.valueOf(IPAA).equals("NaN")) {
            IPAA = 0.0;
        }

        if (String.valueOf(IPAB).equals("NaN")) {
            IPAB = 0.0;
        }

        if (String.valueOf(IPAC).equals("NaN")) {
            IPAC = 0.0;
        }

        double gainIPA = entpTot - ((IPAA + IPAB + IPAC));
        caseIPAGain.setText(String.valueOf(gainIPA));

        double IPSA = ((caseIpsA / caseTotal) * entropiIPSA);
        double IPSB = ((caseIpsB / caseTotal) * entropiIPSB);
        double IPSC = ((caseIpsC / caseTotal) * entropiIPSC);

        if (String.valueOf(IPSA).equals("NaN")) {
            IPSA = 0.0;
        }

        if (String.valueOf(IPSB).equals("NaN")) {
            IPSB = 0.0;
        }

        if (String.valueOf(IPSC).equals("NaN")) {
            IPSC = 0.0;
        }

        double gainIPS = entpTot - ((IPSA + IPSB + IPSC));
        caseIPSGain.setText(String.valueOf(gainIPS));

        Double[] arrayGain = {gainMTK, gainIPA, gainIPS,};

        Double max = arrayGain[0];
        Double min = arrayGain[0];

        for (int k = 0; k < arrayGain.length; k++) {
            if (arrayGain[k] >= max) {
                max = arrayGain[k];

                if (max == arrayGain[0]) {
                    atributAkar.setText("MTK");
                } else if (max == arrayGain[1]) {
                    atributAkar.setText("IPA");
                } else if (max == arrayGain[2]) {
                    atributAkar.setText("IPS");
                }

            } else if (arrayGain[k] <= min) {
                min = arrayGain[k];
            }
        }

        nodeAkar.setText(String.valueOf(max));

        //Proses memasukkan hasil FORM 1 ke dalam LIST
        mtk.Atribut = "A";
        mtk.JumlahKasus = Integer.parseInt(caseMTKA.getText());
        mtk.Ipa = Integer.parseInt(caseMTKAIPA.getText());
        mtk.Ips = Integer.parseInt(caseMTKAIPS.getText());
        mtk.entropi = Double.parseDouble(caseMTKAEntropi.getText());
        mtk.gain = Double.parseDouble(caseMTKGain.getText());

        if (mtk.entropi != 0) {
            listMtk.add(mtk);
        } else {
            listMtkNol.add(mtk);
        }

        mtk = new mtk();

        mtk.Atribut = "B";
        mtk.JumlahKasus = Integer.parseInt(caseMTKB.getText());
        mtk.Ipa = Integer.parseInt(caseMTKBIPA.getText());
        mtk.Ips = Integer.parseInt(caseMTKBIPS.getText());
        mtk.entropi = Double.parseDouble(caseMTKBEntropi.getText());
        mtk.gain = Double.parseDouble(caseMTKGain.getText());

        if (mtk.entropi != 0) {
            listMtk.add(mtk);
        } else {
            listMtkNol.add(mtk);
        }

        mtk = new mtk();

        mtk.Atribut = "C";
        mtk.JumlahKasus = Integer.parseInt(caseMTKC.getText());
        mtk.Ipa = Integer.parseInt(caseMTKCIPA.getText());
        mtk.Ips = Integer.parseInt(caseMTKCIPS.getText());
        mtk.entropi = Double.parseDouble(caseMTKCEntropi.getText());
        mtk.gain = Double.parseDouble(caseMTKGain.getText());

        if (mtk.entropi != 0) {
            listMtk.add(mtk);
        } else {
            listMtkNol.add(mtk);
        }

        mtk = new mtk();

        //IPA
        ipa.Atribut = "A";
        ipa.JumlahKasus = Integer.parseInt(caseIPAA.getText());
        ipa.Ipa = Integer.parseInt(caseIPAAIPA.getText());
        ipa.Ips = Integer.parseInt(caseIPAAIPS.getText());
        ipa.entropi = Double.parseDouble(caseIpaAEntropi.getText());
        ipa.gain = Double.parseDouble(caseIPAGain.getText());

        if (ipa.entropi != 0) {
            listIpa.add(ipa);
        } else {
            listIpaNol.add(ipa);
        }

        ipa = new ipa();

        ipa.Atribut = "B";
        ipa.JumlahKasus = Integer.parseInt(caseIPAB.getText());
        ipa.Ipa = Integer.parseInt(caseIPABIPA.getText());
        ipa.Ips = Integer.parseInt(caseIPABIPS.getText());
        ipa.entropi = Double.parseDouble(caseIpaBEntropi.getText());
        ipa.gain = Double.parseDouble(caseIPAGain.getText());

        if (ipa.entropi != 0) {
            listIpa.add(ipa);
        } else {
            listIpaNol.add(ipa);
        }

        ipa = new ipa();

        ipa.Atribut = "C";
        ipa.JumlahKasus = Integer.parseInt(caseIPAC.getText());
        ipa.Ipa = Integer.parseInt(caseIPACIPA.getText());
        ipa.Ips = Integer.parseInt(caseIPACIPS.getText());
        ipa.entropi = Double.parseDouble(caseIpaCEntropi.getText());
        ipa.gain = Double.parseDouble(caseIPAGain.getText());

        if (ipa.entropi != 0) {
            listIpa.add(ipa);
        } else {
            listIpaNol.add(ipa);
        }

        ipa = new ipa();

        ips.Atribut = "A";
        ips.JumlahKasus = Integer.parseInt(caseIPSA.getText());
        ips.Ipa = Integer.parseInt(caseIPSAIPA.getText());
        ips.Ips = Integer.parseInt(caseIPSAIPS.getText());
        ips.entropi = Double.parseDouble(caseIPSAEntropi.getText());
        ips.gain = Double.parseDouble(caseIPSGain.getText());

        if (ips.entropi != 0) {
            listIps.add(ips);
        } else {
            listIpsNol.add(ips);
        }

        ips = new ips();

        ips.Atribut = "B";
        ips.JumlahKasus = Integer.parseInt(caseIPSB.getText());
        ips.Ipa = Integer.parseInt(caseIPSBIPA.getText());
        ips.Ips = Integer.parseInt(caseIPSBIPS.getText());
        ips.entropi = Double.parseDouble(caseIPSBEntropi.getText());
        ips.gain = Double.parseDouble(caseIPSGain.getText());

        if (ips.entropi != 0) {
            listIps.add(ips);
        } else {
            listIpsNol.add(ips);
        }

        ips = new ips();

        ips.Atribut = "C";
        ips.JumlahKasus = Integer.parseInt(caseIPSC.getText());
        ips.Ipa = Integer.parseInt(caseIPSCIPA.getText());
        ips.Ips = Integer.parseInt(caseIPSCIPS.getText());
        ips.entropi = Double.parseDouble(caseIPSCEntropi.getText());
        ips.gain = Double.parseDouble(caseIPSGain.getText());

        if (ips.entropi != 0) {
            listIps.add(ips);
        } else {
            listIpsNol.add(ips);
        }

        ips = new ips();

        //Menentukan Rules Pertama
        ArrayList<mtk> listRulesMTK = new ArrayList<>();
        ArrayList<ipa> listRulesIPA = new ArrayList<>();
        ArrayList<ips> listRulesIPS = new ArrayList<>();

        String nodeAwal = atributAkar.getText();
        switch (nodeAwal) {
            case "MTK":

            String mapelMTK = "";

            for (int a = 0; a < listMtkNol.size(); a++) {

                mapelMTK += listRulesMTK.get(a).Atribut + ",";
            }

            String missMapel = mapelMTK.substring(0, mapelMTK.length() - 1);

            String[] mapelNewMTK = missMapel.split(",", -1);

            for (int a = 0; a < mapelNewMTK.length; a++) {

                String newMapelMTK = mapelNewMTK[a];

                Collection<mtk> rsultx = listMtkNol.stream()
                .filter(x -> x.Atribut.equals(newMapelMTK))
                .collect(Collectors.toList());

                listRulesMTK = rsultx.stream().collect(toCollection(ArrayList::new));

                int caseIPA = listRulesMTK.get(0).Ipa;
                int caseIPS = listRulesMTK.get(0).Ips;

                String rule1 = "";

                if (caseIPA > caseIPS) {
                    rule1 = "IF " + nodeAwal + "THEN " + "IPA";
                    listRules.add(rule1);

                } else {
                    rule1 = "IF " + nodeAwal + "THEN " + "IPS";
                    listRules.add(rule1);
                }

            }
            break;

            case "IPA":

            String mapelIPA = "";

            for (int a = 0; a < listIpaNol.size(); a++) {

                mapelIPA += listIpaNol.get(a).Atribut + ",";
            }

            String missMapelIPA = mapelIPA.substring(0, mapelIPA.length() - 1);

            String[] mapelNewIPA = missMapelIPA.split(",", -1);

            for (int a = 0; a < mapelNewIPA.length; a++) {

                String newMapel = mapelNewIPA[a];

                Collection<ipa> rsultx = listIpaNol.stream()
                .filter(x -> x.Atribut.equals(newMapel))
                .collect(Collectors.toList());

                listRulesIPA = rsultx.stream().collect(toCollection(ArrayList::new));

                int caseIPA = listRulesIPA.get(0).Ipa;
                int caseIPS = listRulesIPA.get(0).Ips;

                String rule1 = "";

                if (caseIPA > caseIPS) {
                    rule1 = "IF " + nodeAwal + " " + newMapel + " THEN " + "IPA";
                    listRules.add(rule1);

                } else {
                    rule1 = "IF " + nodeAwal + " " + newMapel + " THEN " + "IPS";
                    listRules.add(rule1);
                }

            }
            break;

            case "IPS":

            String mapelIPS = "";

            for (int a = 0; a < listIpaNol.size(); a++) {

                mapelIPS += listIpaNol.get(a).Atribut + ",";
            }

            String missMapelIPS = mapelIPS.substring(0, mapelIPS.length() - 1);

            String[] mapelNewIPS = missMapelIPS.split(",", -1);

            for (int a = 0; a < mapelNewIPS.length; a++) {

                String newMapel = mapelNewIPS[a];

                Collection<ips> rsultx = listIpsNol.stream()
                .filter(x -> x.Atribut.equals(newMapel))
                .collect(Collectors.toList());

                listRulesIPS = rsultx.stream().collect(toCollection(ArrayList::new));

                int caseIPA = listRulesIPS.get(0).Ipa;
                int caseIPS = listRulesIPS.get(0).Ips;

                String rule1 = "";

                if (caseIPA > caseIPS) {
                    rule1 = "IF " + nodeAwal + " " + newMapel + " THEN " + "IPA";
                    listRules.add(rule1);

                } else {
                    rule1 = "IF " + nodeAwal + " " + newMapel + " THEN " + "IPS";
                    listRules.add(rule1);
                }

            }

        }

        //MASUK KE TAHAP 2 PERHITUNGAN ENTROPI DAN GAIN
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();

        int countMtk = listMtk.size();
        int countIpa = listIpa.size();
        int countIps = listIps.size();

        Object rowData[] = new Object[7];

        String ket = "";
        String kodeAtr = "";
        String combine = "";

        String key = atributAkar.getText();
        switch (key) {
            case "IPA":

            for (int i = 0; i < listIpa.size(); i++) {
                rowData[0] = "IPA ";
                rowData[1] = listIpa.get(i).Atribut;

                ket = lblKet.getText();
                kodeAtr = "IPA" + rowData[1];
                combine = ket + kodeAtr;
                lblKet.setText(combine);
            }

            for (int i = 0; i < listMtk.size(); i++) {
                rowData[0] = "MTK ";
                rowData[1] = listMtk.get(i).Atribut;
                rowData[2] = listMtk.get(i).JumlahKasus;
                rowData[3] = listMtk.get(i).Ipa;
                rowData[4] = listMtk.get(i).Ips;
                rowData[5] = listMtk.get(i).entropi;
                rowData[6] = listMtk.get(i).gain;
                model.addRow(rowData);
            }

            for (int i = 0; i < listIps.size(); i++) {
                rowData[0] = "IPS ";
                rowData[1] = listIps.get(i).Atribut;
                rowData[2] = listIps.get(i).JumlahKasus;
                rowData[3] = listIps.get(i).Ipa;
                rowData[4] = listIps.get(i).Ips;
                rowData[5] = listIps.get(i).entropi;
                rowData[6] = listIps.get(i).gain;
                model.addRow(rowData);
            }

            DefaultTableModel model2 = (DefaultTableModel) jTable3.getModel();

            Object rowData2[] = new Object[3];

            DefaultTableModel model3 = (DefaultTableModel) jTable4.getModel();

            Object rowData3[] = new Object[2];

            String mtk = "MTK,IPS";

            String[] atrx = mtk.split(",", -1);

            for (int i = 0; i < minat.length; i++) {

                for (int k = 0; k < atrx.length; k++) {

                    for (int j = 0; j < huruf.length; j++) {

                        String atribut1 = atrx[k] + huruf[j];

                        int kasus = ia.CountKasus(atribut1, kodeAtr, minat[i]);

                        rowData2[0] = atribut1;
                        rowData2[1] = minat[i];
                        rowData2[2] = kasus;

                        model2.addRow(rowData2);

                        aturanx = new aturan();

                        int totx = 0;

                        aturanx.Atribut = atribut1;
                        aturanx.Minat = minat[i];
                        aturanx.Kasus = kasus;

                        listAturan.add(aturanx);

                    }
                }

            }

            ArrayList<aturan> newList = new ArrayList<>();
            AturanEntropi ate = new AturanEntropi();
            ArrayList<AturanEntropi> aturanEnt = new ArrayList<>();
            ArrayList<aturan> listT = new ArrayList<>();

            AturanEntropiNol ateNol = new AturanEntropiNol();
            ArrayList<AturanEntropi> aturanEntNol = new ArrayList<>();

            ArrayList<gain> listGainTahap2 = new ArrayList<gain>();
            gain gn = new gain();

            String case22 = "IPA,IPS";
            String[] arrCase22 = case22.split(",", -1);

            for (int j = 0; j < arrCase22.length; j++) {

                String ax = arrCase22[j];

                Collection<aturan> resultxx = listAturan.stream()
                .filter(a -> Objects.equals(a.Minat, ax))
                .collect(Collectors.toList());

                listT = resultxx.stream().collect(toCollection(ArrayList::new));

                int totKasusIpa = 0;

                for (int a = 0; a < listT.size(); a++) {

                    totKasusIpa += listT.get(a).Kasus;

                }

                int aac = totKasusIpa / 2;

                if (ax.equals("IPA")) {
                    txtTotIpa.setText(String.valueOf(aac));
                } else {
                    txtTotIps.setText(String.valueOf(aac));
                }

                totKasusIpa = 0;

            }

            //total entropi:
            int totKasoes = Integer.parseInt(txtTotIpa.getText()) + Integer.parseInt(txtTotIps.getText());
            txtTotal.setText(String.valueOf(totKasoes));

            float divIpa = ((float) Integer.parseInt(txtTotIpa.getText())) / totKasoes;
            float divIps = ((float) Integer.parseInt(txtTotIps.getText())) / totKasoes;

            double logIpa = Math.log10(divIpa) / 0.3;
            double logIps = Math.log10(divIps) / 0.3;

            double entTotal = (((-divIpa) * logIpa) + ((-divIps) * logIps));

            txtEntropi.setText(String.valueOf(entTotal));
            //--------------------------------------------------------------

            String case2 = "MTKA,MTKB,MTKC,IPSA,IPSB,IPSC";

            int kasus2 = 0;

            String[] atrCase2 = case2.split(",", -1);

            for (int z = 0; z < atrCase2.length; z++) {

                String atributCase2 = atrCase2[z];

                Collection<aturan> resultx = listAturan.stream()
                .filter(a -> Objects.equals(a.Atribut, atributCase2))
                .collect(Collectors.toList());

                int count = newList.size();

                newList = resultx.stream().collect(toCollection(ArrayList::new));

                int totKasus = 0;

                for (int a = 0; a < newList.size(); a++) {

                    int kasus = newList.get(a).Kasus;
                    totKasus += kasus;

                }

                double hasil = 0.0;

                for (int a = 0; a < newList.size(); a++) {

                    String atribut = newList.get(a).Atribut;
                    int kasus = newList.get(a).Kasus;

                    ate.atribut = atribut;

                    if (kasus == 0) {
                        ate.entropi = 0.0;
                    } else {

                        float ent2IPA = ((float) kasus) / totKasus;

                        double logEnt2 = Math.log10(ent2IPA) / 0.3;

                        double kali = ((-ent2IPA) * logEnt2);

                        hasil += kali;

                    }
                }

                ate.entropi = hasil;

                aturanEnt.add(ate);

                if (hasil == 0.0) {
                    aturanEntNol.add(ate);
                }

                int totalKasus = 0;

                String atribut = "";

                //MENCARI GAIN Tahap 2
                for (int a = 0; a < newList.size(); a++) {

                    atribut = newList.get(a).Atribut;
                    int kasus = newList.get(a).Kasus;
                    totalKasus += kasus;

                }

                double gain1 = (((float) totalKasus / totKasoes) * hasil);

                gn = new gain();
                gn.Atribut = atribut;
                gn.Nilai = gain1;

                listGainTahap2.add(gn);

                //---------------
                int countListEnt = aturanEnt.size();

                rowData3[0] = ate.atribut;
                rowData3[1] = ate.entropi;

                model3.addRow(rowData3);

                ate = new AturanEntropi();

            }

            DefaultTableModel model4 = (DefaultTableModel) jTable5.getModel();

            Object rowData4[] = new Object[2];

            ArrayList<gain> gainInterim = new ArrayList<>();

            String atribut = "IPA,IPS,MTK";
            String[] arrAtr = atribut.split(",", -1);

            for (int x = 0; x < arrAtr.length; x++) {

                String atrxx = arrAtr[x];

                Collection<gain> resultx = listGainTahap2.stream()
                .filter(a -> a.Atribut.startsWith(atrxx))
                .collect(Collectors.toList());

                int count = resultx.size();

                if (count != 0) {

                    gainInterim = resultx.stream().collect(toCollection(ArrayList::new));

                    double entropiTotal = Double.parseDouble(txtEntropi.getText());

                    double totEnt = 0.0;

                    for (int a = 0; a < gainInterim.size(); a++) {
                        totEnt += gainInterim.get(a).Nilai;
                    }

                    double gain = entropiTotal - totEnt;

                    rowData4[0] = atrxx;
                    rowData4[1] = gain;

                    model4.addRow(rowData4);

                }
            }

            //TAHAP 3
            int countTbl = jTable5.getRowCount();
            double[] arrayGain2 = new double[countTbl];

            for (int a = 0; a < countTbl; a++) {
                double zz = Double.parseDouble(jTable5.getValueAt(a, 1).toString());
                arrayGain2[a] = zz;

            }

            double max2 = arrayGain2[0];
            double min2 = arrayGain2[0];

            //mencari max gain
            for (int k = 0; k < arrayGain2.length; k++) {
                if (arrayGain2[k] >= max2) {
                    max2 = arrayGain2[k];

                } else if (arrayGain2[k] <= min2) {
                    min2 = arrayGain2[k];
                }
            }

            double maxGain = max2;

            //mencari atribut berdasarkan gain max
            ArrayList<gain> gainList = new ArrayList<gain>();
            ArrayList<aturan> atrnList = new ArrayList<aturan>();

            Collection<gain> resultxz = listGainTahap2.stream()
            .filter(z -> z.Nilai == maxGain)
            .collect(Collectors.toList());

            int counta = resultxz.size();

            if (counta != 0) {

                gainList = resultxz.stream().collect(toCollection(ArrayList::new));

                String minat2 = "";
                String minatMin = "";

                for (int a = 0; a < gainList.size(); a++) {

                    minat2 = gainList.get(a).Atribut;
                }

                String atribut2 = minat2;

                ArrayList<gain> list2 = new ArrayList<gain>();

                ArrayList<String> listAtr = new ArrayList<String>();

                for (int a = 0; a < gainInterim.size(); a++) {

                    String atribut3 = gainInterim.get(a).Atribut;

                    listAtr.add(atribut3);

                }

                lblKet2.setText("Mencari Gain dan Entropi Terhadap " + kodeAtr + " dan " + atribut2);

                //Menentukan rules tahap 2
                ArrayList<AturanEntropi> listSecondRules = new ArrayList<>();

                String node2 = atribut2;
                String lastNode2 = node2.substring(0, node2.length() - 1);

                Collection<AturanEntropi> rsult = aturanEntNol.stream()
                .filter(x -> x.atribut.startsWith(lastNode2))
                .collect(Collectors.toList());

                listSecondRules = rsult.stream().collect(toCollection(ArrayList::new));

                ArrayList<aturan> listAtrx = new ArrayList<>();

                String atrSecond = "";

                switch (lastNode2) {
                    case "IPA":
                    for (int a = 0; a < listSecondRules.size(); a++) {

                        atrSecond = listSecondRules.get(a).atribut;

                        String atrRules = atrSecond;

                        String separateAtr = atrSecond.substring(atrSecond.length() - 1);

                        Collection<aturan> rsultAtr = listAturan.stream()
                        .filter(x -> x.Atribut.equals(atrRules))
                        .collect(Collectors.toList());

                        listAtrx = rsultAtr.stream().collect(toCollection(ArrayList::new));

                        String mnt1 = listAtrx.get(0).Minat;
                        int ksus1 = listAtrx.get(0).Kasus;

                        String mnt2 = listAtrx.get(1).Minat;
                        int ksus2 = listAtrx.get(1).Kasus;

                        String jurusan = "";

                        if (ksus1 >= ksus2 && separateAtr.equals("A")) {

                            jurusan = "IPA";

                        } else if (ksus1 >= ksus2 && separateAtr.equals("B")) {

                            jurusan = "IPA";

                        } else if (ksus1 >= ksus2 && separateAtr.equals("C")) {
                            jurusan = "IPS";

                        } else if (ksus2 >= ksus1 && separateAtr.equals("A")) {
                            jurusan = "IPA";

                        } else if (ksus2 >= ksus1 && separateAtr.equals("B")) {
                            jurusan = "IPA";

                        } else if (ksus2 >= ksus1 && separateAtr.equals("C")) {
                            jurusan = "IPS";
                        }

                        String rule2 = "IF " + kodeAtr + " AND " + atrSecond + " THEN " + jurusan;

                        listRules.add(rule2);

                    }
                    break;

                    case "IPS":
                    for (int a = 0; a < listSecondRules.size(); a++) {

                        atrSecond = listSecondRules.get(a).atribut;

                        String atrRules = atrSecond;

                        String separateAtr = atrSecond.substring(atrSecond.length() - 1);

                        Collection<aturan> rsultAtr = listAturan.stream()
                        .filter(x -> x.Atribut.equals(atrRules))
                        .collect(Collectors.toList());

                        listAtrx = rsultAtr.stream().collect(toCollection(ArrayList::new));

                        String mnt1 = listAtrx.get(0).Minat;
                        int ksus1 = listAtrx.get(0).Kasus;

                        String mnt2 = listAtrx.get(1).Minat;
                        int ksus2 = listAtrx.get(1).Kasus;

                        String jurusan = "";

                        if (ksus1 >= ksus2 && separateAtr.equals("A")) {

                            jurusan = "IPA";

                        } else if (ksus1 >= ksus2 && separateAtr.equals("B")) {

                            jurusan = "IPA";

                        } else if (ksus1 >= ksus2 && separateAtr.equals("C")) {
                            jurusan = "IPA";

                        } else if (ksus2 >= ksus1 && separateAtr.equals("A")) {
                            jurusan = "IPS";

                        } else if (ksus2 >= ksus1 && separateAtr.equals("B")) {
                            jurusan = "IPS";

                        } else if (ksus2 >= ksus1 && separateAtr.equals("C")) {
                            jurusan = "IPS";
                        }

                        String rule2 = "IF " + kodeAtr + " AND " + atrSecond + " THEN " + jurusan;

                        listRules.add(rule2);

                    }
                    break;

                    case "MTK":
                    for (int a = 0; a < listSecondRules.size(); a++) {

                        atrSecond = listSecondRules.get(a).atribut;

                        String atrRules = atrSecond;

                        String separateAtr = atrSecond.substring(atrSecond.length() - 1);

                        Collection<aturan> rsultAtr = listAturan.stream()
                        .filter(x -> x.Atribut.equals(atrRules))
                        .collect(Collectors.toList());

                        listAtrx = rsultAtr.stream().collect(toCollection(ArrayList::new));

                        String mnt1 = listAtrx.get(0).Minat;
                        int ksus1 = listAtrx.get(0).Kasus;

                        String mnt2 = listAtrx.get(1).Minat;
                        int ksus2 = listAtrx.get(1).Kasus;

                        String jurusan = "";

                        if (ksus1 >= ksus2 && separateAtr.equals("A")) {

                            jurusan = "IPA";

                        } else if (ksus1 >= ksus2 && separateAtr.equals("B")) {

                            jurusan = "IPA";

                        } else if (ksus1 >= ksus2 && separateAtr.equals("C")) {
                            jurusan = "IPS";

                        } else if (ksus2 >= ksus1 && separateAtr.equals("A")) {
                            jurusan = "IPS";

                        } else if (ksus2 >= ksus1 && separateAtr.equals("B")) {
                            jurusan = "IPS";

                        } else if (ksus2 >= ksus1 && separateAtr.equals("C")) {
                            jurusan = "IPS";
                        }

                        String rule2 = "IF " + kodeAtr + " AND " + atrSecond + " THEN " + jurusan;

                        listRules.add(rule2);

                    }
                    break;
                }
                //============BATAS RULES 2

                String first = kodeAtr;
                String second = atribut2;

                ArrayList<aturan> listAturanTbl = new ArrayList<>();

                for (int a = 0; a < arrCase22.length; a++) {

                    String minatz = arrCase22[a];

                    for (int b = 0; b < listAtr.size(); b++) {

                        String atrxx = listAtr.get(b).toString();

                        int jmlData = ia.CountKasus3(kodeAtr, atribut2, atrxx, minatz);

                        DefaultTableModel modelTbl = (DefaultTableModel) jTable6.getModel();

                        Object rowTbl[] = new Object[3];

                        rowTbl[0] = atrxx;
                        rowTbl[1] = minatz;
                        rowTbl[2] = jmlData;

                        modelTbl.addRow(rowTbl);

                        aturanx = new aturan();

                        int totx = 0;

                        aturanx.Atribut = atrxx;
                        aturanx.Minat = minatz;
                        aturanx.Kasus = jmlData;

                        listAturanTbl.add(aturanx);

                    }

                }

                ArrayList<aturan> newListAturan = new ArrayList<>();
                ArrayList<AturanEntropi> aturanEntropi = new ArrayList<>();
                ArrayList<aturan> listTbl = new ArrayList<>();
                ArrayList<gain> gainList2 = new ArrayList<>();
                ArrayList<AturanEntropi> atrEntThirdNol = new ArrayList<>();

                for (int j = 0; j < arrCase22.length; j++) {

                    String minatZ = arrCase22[j];

                    Collection<aturan> resultxx = listAturanTbl.stream()
                    .filter(a -> Objects.equals(a.Minat, minatZ))
                    .collect(Collectors.toList());

                    listTbl = resultxx.stream().collect(toCollection(ArrayList::new));

                    int totKasus = 0;

                    for (int a = 0; a < listTbl.size(); a++) {

                        totKasus += listTbl.get(a).Kasus;

                    }

                    int total = totKasus;

                    if (minatZ.equals("IPA")) {
                        txtTotIpa2.setText(String.valueOf(total));
                    } else {
                        txtTotIps2.setText(String.valueOf(total));
                    }

                    totKasus = 0;

                }

                //total entropi:
                int totKasus2 = Integer.parseInt(txtTotIpa2.getText()) + Integer.parseInt(txtTotIps2.getText());
                txtTotal2.setText(String.valueOf(totKasus2));

                float divIpa2 = ((float) Integer.parseInt(txtTotIpa2.getText())) / totKasus2;
                float divIps2 = ((float) Integer.parseInt(txtTotIps2.getText())) / totKasus2;

                double logIpa2 = Math.log10(divIpa2) / 0.3;
                double logIps2 = Math.log10(divIps2) / 0.3;

                double entTotal2 = (((-divIpa2) * logIpa2) + ((-divIps2) * logIps2));

                txtEntropi2.setText(String.valueOf(entTotal2));
                //--------------------------------------------------------------

                //Menghitung entropi kembali
                String caseTbl2 = "";

                for (int a = 0; a < listTbl.size(); a++) {
                    caseTbl2 += listTbl.get(a).Atribut + ",";
                }

                String lastWord = caseTbl2.substring(0, caseTbl2.length() - 1);

                String[] atrCaseTbl2 = lastWord.split(",", -1);

                for (int z = 0; z < atrCaseTbl2.length; z++) {

                    String atributCase2 = atrCaseTbl2[z];

                    Collection<aturan> resultx = listAturanTbl.stream()
                    .filter(a -> Objects.equals(a.Atribut, atributCase2))
                    .collect(Collectors.toList());

                    int count = newList.size();

                    newListAturan = resultx.stream().collect(toCollection(ArrayList::new));

                    int totKasus = 0;

                    for (int a = 0; a < newListAturan.size(); a++) {

                        int kasus = newListAturan.get(a).Kasus;
                        totKasus += kasus;

                    }

                    double hasil = 0.0;

                    for (int a = 0; a < newListAturan.size(); a++) {

                        ate = new AturanEntropi();

                        String atrNew = newListAturan.get(a).Atribut;
                        int kasus = newListAturan.get(a).Kasus;

                        ate.atribut = atrNew;

                        if (kasus == 0) {
                            ate.entropi = 0.0;

                        } else {

                            float ent2IPA = ((float) kasus) / totKasus;

                            double logEnt2 = Math.log10(ent2IPA) / 0.3;

                            double kali = ((-ent2IPA) * logEnt2);

                            hasil += kali;

                        }
                    }

                    ate.entropi = hasil;

                    aturanEntropi.add(ate);

                    if (hasil == 0.0) {
                        atrEntThirdNol.add(ate);
                    }

                    DefaultTableModel modelTbl = (DefaultTableModel) jTable7.getModel();

                    Object rowTbl[] = new Object[2];

                    rowTbl[0] = ate.atribut;
                    rowTbl[1] = ate.entropi;

                    modelTbl.addRow(rowTbl);

                    int totalKasus = 0;

                    String atribt = "";

                    //MENCARI GAIN
                    for (int a = 0; a < newListAturan.size(); a++) {

                        atribut = newListAturan.get(a).Atribut;
                        int kasus = newListAturan.get(a).Kasus;
                        totalKasus += kasus;

                    }

                    double gain1 = (((float) totalKasus / Integer.parseInt(txtTotal2.getText())) * hasil);

                    gn = new gain();
                    gn.Atribut = atribut;
                    gn.Nilai = gain1;

                    gainList2.add(gn);

                }

                double totRes = 0.0;

                ArrayList<gain> listGainer = new ArrayList<>();

                String atribt = "IPA,IPS,MTK";
                String[] arrAtrb = atribt.split(",", -1);

                for (int x = 0; x < arrAtrb.length; x++) {

                    String atrxx = arrAtrb[x];

                    Collection<gain> resultx = gainList2.stream()
                    .filter(a -> a.Atribut.startsWith(atrxx))
                    .collect(Collectors.toList());

                    int count = resultx.size();

                    if (count != 0) {

                        for (int a = 0; a < gainList2.size(); a++) {

                            totRes += gainList2.get(a).Nilai;

                        }

                        double totalEnt2 = Double.parseDouble(txtEntropi2.getText());

                        double formula = ((double) totalEnt2 - totRes);

                        gn = new gain();
                        gn.Atribut = atrxx;
                        gn.Nilai = formula;

                        listGainer.add(gn);

                        DefaultTableModel modelTbl = (DefaultTableModel) jTable8.getModel();

                        Object rowTbl[] = new Object[2];

                        rowTbl[0] = gn.Atribut;
                        rowTbl[1] = gn.Nilai;

                        modelTbl.addRow(rowTbl);

                    }

                }

                //Rules3
                ArrayList<AturanEntropi> listThirdRules = new ArrayList<>();

                listThirdRules = atrEntThirdNol;

                ArrayList<aturan> listAturan3 = new ArrayList<>();

                for (int a = 0; a < aturanEntropi.size(); a++) {

                    String atr3 = aturanEntropi.get(a).atribut;

                    String lastNode3 = atr3.substring(0, atr3.length() - 1);

                    switch (lastNode3) {

                        case "MTK":

                        String atrRules = atr3;

                        String separateAtr = atr3.substring(atr3.length() - 1);

                        Collection<aturan> rsultAtr = listAturanTbl.stream()
                        .filter(x -> x.Atribut.equals(atrRules))
                        .collect(Collectors.toList());

                        listAturan3 = rsultAtr.stream().collect(toCollection(ArrayList::new));

                        String mnt1 = listAtrx.get(0).Minat;
                        int ksus1 = listAtrx.get(0).Kasus;

                        String mnt2 = listAtrx.get(1).Minat;
                        int ksus2 = listAtrx.get(1).Kasus;

                        String jurusan = "";

                        if (ksus1 >= ksus2 && separateAtr.equals("A")) {

                            jurusan = "IPA";

                        } else if (ksus1 >= ksus2 && separateAtr.equals("B")) {

                            jurusan = "IPS";

                        } else if (ksus1 >= ksus2 && separateAtr.equals("C")) {
                            jurusan = "IPS";

                        } else if (ksus2 >= ksus1 && separateAtr.equals("A")) {
                            jurusan = "IPS";

                        } else if (ksus2 >= ksus1 && separateAtr.equals("B")) {
                            jurusan = "IPS";

                        } else if (ksus2 >= ksus1 && separateAtr.equals("C")) {
                            jurusan = "IPS";
                        }

                        String rule3 = "IF " + kodeAtr + " AND " + atribut2 + " AND " + atrRules + " THEN " + jurusan;

                        listRules.add(rule3);

                        break;
                    }

                }
            }

            String Rules = "";

            for (int a = 0; a < listRules.size(); a++) {

                Rules += listRules.get(a) + "\n\r";

            }

            jTextArea1.setText(Rules);

            break;

            case "IPS":

            for (int i = 0; i < listIps.size(); i++) {
                rowData[0] = "IPS ";
                rowData[1] = listIps.get(i).Atribut;

                ket = lblKet.getText();
                kodeAtr = " IPS " + rowData[1];
                combine = ket + kodeAtr;
                lblKet.setText(combine);
            }

            for (int i = 0; i < listMtk.size(); i++) {
                rowData[0] = "MTK ";
                rowData[1] = listMtk.get(i).Atribut;
                rowData[2] = listMtk.get(i).JumlahKasus;
                rowData[3] = listMtk.get(i).Ipa;
                rowData[4] = listMtk.get(i).Ips;
                rowData[5] = listMtk.get(i).entropi;
                rowData[6] = listMtk.get(i).gain;
                model.addRow(rowData);
            }

            for (int i = 0; i < listIpa.size(); i++) {
                rowData[0] = "IPA ";
                rowData[1] = listIpa.get(i).Atribut;
                rowData[2] = listIpa.get(i).JumlahKasus;
                rowData[3] = listIpa.get(i).Ipa;
                rowData[4] = listIpa.get(i).Ips;
                rowData[5] = listIpa.get(i).entropi;
                rowData[6] = listIpa.get(i).gain;
                model.addRow(rowData);
            }
            
            DefaultTableModel model2IPS = (DefaultTableModel) jTable3.getModel();

            Object rowData2IPS[] = new Object[3];

            DefaultTableModel model3IPS = (DefaultTableModel) jTable4.getModel();

            Object rowData3IPS[] = new Object[2];

            String ipa = "IPA,IPS";

            String[] atrxIPS = ipa.split(",", -1);

            for (int i = 0; i < minat.length; i++) {

                for (int k = 0; k < atrxIPS.length; k++) {

                    for (int j = 0; j < huruf.length; j++) {

                        String atribut1IPS = atrxIPS[k] + huruf[j];

                        int kasus = ia.CountKasus(atribut1IPS, kodeAtr, minat[i]);

                        rowData2IPS[0] = atribut1IPS;
                        rowData2IPS[1] = minat[i];
                        rowData2IPS[2] = kasus;

                        model2IPS.addRow(rowData2IPS);

                        aturanx = new aturan();

                        int totx = 0;

                        aturanx.Atribut = atribut1IPS;
                        aturanx.Minat = minat[i];
                        aturanx.Kasus = kasus;

                        listAturan.add(aturanx);

                    }
                }

            }

            ArrayList<aturan> newListIPS = new ArrayList<>();
            AturanEntropi ateIPS = new AturanEntropi();
            ArrayList<AturanEntropi> aturanEntIPS = new ArrayList<>();
            ArrayList<aturan> listTIPS = new ArrayList<>();

            AturanEntropiNol ateNolIPS = new AturanEntropiNol();
            ArrayList<AturanEntropi> aturanEntNolIPS = new ArrayList<>();

            ArrayList<gain> listGainTahap2IPS = new ArrayList<gain>();
            gain gnIPS = new gain();

            String case22IPS = "IPA,MTK";
            String[] arrCase22IPS = case22IPS.split(",", -1);

            for (int j = 0; j < arrCase22IPS.length; j++) {

                String axIPS = arrCase22IPS[j];

                Collection<aturan> resultxx = listAturan.stream()
                .filter(a -> Objects.equals(a.Minat, axIPS))
                .collect(Collectors.toList());

                listTIPS = resultxx.stream().collect(toCollection(ArrayList::new));

                int totKasusIpaIPS = 0;

                for (int a = 0; a < listTIPS.size(); a++) {

                    totKasusIpaIPS += listTIPS.get(a).Kasus;

                }

                int aacIPS = totKasusIpaIPS / 2;

                if (axIPS.equals("IPA")) {
                    txtTotIpa.setText(String.valueOf(aacIPS));
                } else {
                    txtTotIps.setText(String.valueOf(aacIPS));
                }

                totKasusIpaIPS = 0;

            }

            //total entropi:
            int totKasoesIPS = Integer.parseInt(txtTotIpa.getText()) + Integer.parseInt(txtTotIps.getText());
            txtTotal.setText(String.valueOf(totKasoesIPS));

            float divIpaIPS = ((float) Integer.parseInt(txtTotIpa.getText())) / totKasoesIPS;
            float divIpsIPS = ((float) Integer.parseInt(txtTotIps.getText())) / totKasoesIPS;

            double logIpaIPS = Math.log10(divIpaIPS) / 0.3;
            double logIpsIPS = Math.log10(divIpsIPS) / 0.3;

            double entTotalIPS = (((-divIpaIPS) * logIpaIPS) + ((-divIpsIPS) * logIpsIPS));

            txtEntropi.setText(String.valueOf(entTotalIPS));
            //--------------------------------------------------------------

            String case2IPS = "MTKA,MTKB,MTKC,IPAA,IPAB,IPAC";

            int kasus2IPS = 0;

            String[] atrCase2IPS = case2IPS.split(",", -1);

            for (int z = 0; z < atrCase2IPS.length; z++) {

                String atributCase2IPS = atrCase2IPS[z];

                Collection<aturan> resultx = listAturan.stream()
                .filter(a -> Objects.equals(a.Atribut, atributCase2IPS))
                .collect(Collectors.toList());

                int count = newListIPS.size();

                newListIPS = resultx.stream().collect(toCollection(ArrayList::new));

                int totKasusIPS = 0;

                for (int a = 0; a < newListIPS.size(); a++) {

                    int kasusIPS = newListIPS.get(a).Kasus;
                    totKasusIPS += kasusIPS;

                }

                double hasilIPS = 0.0;

                for (int a = 0; a < newListIPS.size(); a++) {

                    String atributIPS = newListIPS.get(a).Atribut;
                    int kasusIPS = newListIPS.get(a).Kasus;

                    ateIPS.atribut = atributIPS;

                    if (kasusIPS == 0) {
                        ateIPS.entropi = 0.0;
                    } else {

                        float ent2IPAIPS = ((float) kasusIPS) / totKasusIPS;

                        double logEnt2IPS = Math.log10(ent2IPAIPS) / 0.3;

                        double kaliIPS = ((-ent2IPAIPS) * logEnt2IPS);

                        hasilIPS += kaliIPS;

                    }
                }

                ateIPS.entropi = hasilIPS;

                aturanEntIPS.add(ateIPS);

                if (hasilIPS == 0.0) {
                    aturanEntNolIPS.add(ateIPS);
                }

                int totalKasusIPS = 0;

                String atributIPS = "";

                //MENCARI GAIN Tahap 2
                for (int a = 0; a < newListIPS.size(); a++) {

                    atributIPS = newListIPS.get(a).Atribut;
                    int kasusIPS = newListIPS.get(a).Kasus;
                    totalKasusIPS += kasusIPS;

                }

                double gain1IPS = (((float) totalKasusIPS / totKasoesIPS) * hasilIPS);

                gnIPS = new gain();
                gnIPS.Atribut = atributIPS;
                gnIPS.Nilai = gain1IPS;

                listGainTahap2IPS.add(gnIPS);

                //---------------
                int countListEntIPS = aturanEntIPS.size();

                rowData3IPS[0] = ateIPS.atribut;
                rowData3IPS[1] = ateIPS.entropi;

                model3IPS.addRow(rowData3IPS);

                ateIPS = new AturanEntropi();

            }

            DefaultTableModel model4IPS = (DefaultTableModel) jTable5.getModel();

            Object rowData4IPS[] = new Object[2];

            ArrayList<gain> gainInterimIPS = new ArrayList<>();

            String atributIPS = "IPA,IPS,MTK";
            String[] arrAtrIPS = atributIPS.split(",", -1);

            for (int x = 0; x < arrAtrIPS.length; x++) {

                String atrxxIPS = arrAtrIPS[x];

                Collection<gain> resultx = listGainTahap2IPS.stream()
                .filter(a -> a.Atribut.startsWith(atrxxIPS))
                .collect(Collectors.toList());

                int countIPS = resultx.size();

                if (countIPS != 0) {

                    gainInterimIPS = resultx.stream().collect(toCollection(ArrayList::new));

                    double entropiTotalIPS = Double.parseDouble(txtEntropi.getText());

                    double totEntIPS = 0.0;

                    for (int a = 0; a < gainInterimIPS.size(); a++) {
                        totEntIPS += gainInterimIPS.get(a).Nilai;
                    }

                    double gain = entropiTotalIPS - totEntIPS;

                    rowData4IPS[0] = atrxxIPS;
                    rowData4IPS[1] = gain;

                    model4IPS.addRow(rowData4IPS);

                }
            }

            //TAHAP 3
            int countTblIPS = jTable5.getRowCount();
            double[] arrayGain2IPS = new double[countTblIPS];

            for (int a = 0; a < countTblIPS; a++) {
                double zz = Double.parseDouble(jTable5.getValueAt(a, 1).toString());
                arrayGain2IPS[a] = zz;

            }

            double max2IPS = arrayGain2IPS[0];
            double min2IPS = arrayGain2IPS[0];

            //mencari max gain
            for (int k = 0; k < arrayGain2IPS.length; k++) {
                if (arrayGain2IPS[k] >= max2IPS) {
                    max2IPS = arrayGain2IPS[k];

                } else if (arrayGain2IPS[k] <= min2IPS) {
                    min2IPS = arrayGain2IPS[k];
                }
            }

            double maxGainIPS = max2IPS;

            //mencari atribut berdasarkan gain max
            ArrayList<gain> gainListIPS = new ArrayList<gain>();
            ArrayList<aturan> atrnListIPS = new ArrayList<aturan>();

            Collection<gain> resultxzIPS = listGainTahap2IPS.stream()
            .filter(z -> z.Nilai == maxGainIPS)
            .collect(Collectors.toList());

            int countaIPS = resultxzIPS.size();

            if (countaIPS != 0) {

                gainListIPS = resultxzIPS.stream().collect(toCollection(ArrayList::new));

                String minat2IPS = "";
                String minatMinIPS = "";

                for (int a = 0; a < gainListIPS.size(); a++) {

                    minat2IPS = gainListIPS.get(a).Atribut;
                }

                String atribut2IPS = minat2IPS;

                ArrayList<gain> list2IPS = new ArrayList<gain>();

                ArrayList<String> listAtrIPS = new ArrayList<String>();

                for (int a = 0; a < gainInterimIPS.size(); a++) {

                    String atribut3 = gainInterimIPS.get(a).Atribut;

                    listAtrIPS.add(atribut3);

                }

                lblKet2.setText("Mencari Gain dan Entropi Terhadap " + kodeAtr + " dan " + atribut2IPS);

                //Menentukan rules tahap 2
                ArrayList<AturanEntropi> listSecondRulesIPS = new ArrayList<>();

                String node2IPS = atribut2IPS;
                String lastNode2IPS = node2IPS.substring(0, node2IPS.length() - 1);

                Collection<AturanEntropi> rsult = aturanEntNolIPS.stream()
                .filter(x -> x.atribut.startsWith(lastNode2IPS))
                .collect(Collectors.toList());

                listSecondRulesIPS = rsult.stream().collect(toCollection(ArrayList::new));

                ArrayList<aturan> listAtrxIPS = new ArrayList<>();

                String atrSecondIPS = "";

                switch (lastNode2IPS) {
                    case "IPA":
                    for (int a = 0; a < listSecondRulesIPS.size(); a++) {

                        atrSecondIPS = listSecondRulesIPS.get(a).atribut;

                        String atrRules = atrSecondIPS;

                        String separateAtr = atrSecondIPS.substring(atrSecondIPS.length() - 1);

                        Collection<aturan> rsultAtrIPS = listAturan.stream()
                        .filter(x -> x.Atribut.equals(atrRules))
                        .collect(Collectors.toList());

                        listAtrxIPS = rsultAtrIPS.stream().collect(toCollection(ArrayList::new));

                        String mnt1IPS = listAtrxIPS.get(0).Minat;
                        int ksus1IPS = listAtrxIPS.get(0).Kasus;

                        String mnt2IPS = listAtrxIPS.get(1).Minat;
                        int ksus2IPS = listAtrxIPS.get(1).Kasus;

                        String jurusanIPS = "";

                        if (ksus1IPS >= ksus2IPS && separateAtr.equals("A")) {

                            jurusanIPS = "IPA";

                        } else if (ksus1IPS >= ksus2IPS && separateAtr.equals("B")) {

                            jurusanIPS = "IPA";

                        } else if (ksus1IPS >= ksus2IPS && separateAtr.equals("C")) {
                            jurusanIPS = "IPS";

                        } else if (ksus2IPS >= ksus1IPS && separateAtr.equals("A")) {
                            jurusanIPS = "IPA";

                        } else if (ksus2IPS >= ksus1IPS && separateAtr.equals("B")) {
                            jurusanIPS = "IPA";

                        } else if (ksus2IPS >= ksus1IPS && separateAtr.equals("C")) {
                            jurusanIPS = "IPS";
                        }

                        String rule2 = "IF " + kodeAtr + " AND " + atrSecondIPS + " THEN " + jurusanIPS;

                        listRules.add(rule2);

                    }
                    break;

                    case "IPS":
                    for (int a = 0; a < listSecondRulesIPS.size(); a++) {

                        atrSecondIPS = listSecondRulesIPS.get(a).atribut;

                        String atrRulesIPS = atrSecondIPS;

                        String separateAtrIPS = atrSecondIPS.substring(atrSecondIPS.length() - 1);

                        Collection<aturan> rsultAtrIPS = listAturan.stream()
                        .filter(x -> x.Atribut.equals(atrRulesIPS))
                        .collect(Collectors.toList());

                        listAtrxIPS = rsultAtrIPS.stream().collect(toCollection(ArrayList::new));

                        String mnt1IPS = listAtrxIPS.get(0).Minat;
                        int ksus1IPS = listAtrxIPS.get(0).Kasus;

                        String mnt2IPS = listAtrxIPS.get(1).Minat;
                        int ksus2IPS = listAtrxIPS.get(1).Kasus;

                        String jurusanIPS = "";

                        if (ksus1IPS >= ksus2IPS && separateAtrIPS.equals("A")) {

                            jurusanIPS = "IPA";

                        } else if (ksus1IPS >= ksus2IPS && separateAtrIPS.equals("B")) {

                            jurusanIPS = "IPA";

                        } else if (ksus1IPS >= ksus2IPS && separateAtrIPS.equals("C")) {
                            jurusanIPS = "IPA";

                        } else if (ksus2IPS >= ksus1IPS && separateAtrIPS.equals("A")) {
                            jurusanIPS = "IPS";

                        } else if (ksus2IPS >= ksus1IPS && separateAtrIPS.equals("B")) {
                            jurusanIPS = "IPS";

                        } else if (ksus2IPS >= ksus1IPS && separateAtrIPS.equals("C")) {
                            jurusanIPS = "IPS";
                        }

                        String rule2 = "IF " + kodeAtr + " AND " + atrSecondIPS + " THEN " + jurusanIPS;

                        listRules.add(rule2);

                    }
                    break;

                    case "MTK":
                    for (int a = 0; a < listSecondRulesIPS.size(); a++) {

                        atrSecondIPS = listSecondRulesIPS.get(a).atribut;

                        String atrRulesIPS = atrSecondIPS;

                        String separateAtrIPS = atrSecondIPS.substring(atrSecondIPS.length() - 1);

                        Collection<aturan> rsultAtrIPS = listAturan.stream()
                        .filter(x -> x.Atribut.equals(atrRulesIPS))
                        .collect(Collectors.toList());

                        listAtrxIPS = rsultAtrIPS.stream().collect(toCollection(ArrayList::new));

                        String mnt1IPS = listAtrxIPS.get(0).Minat;
                        int ksus1IPS = listAtrxIPS.get(0).Kasus;

                        String mnt2IPS = listAtrxIPS.get(1).Minat;
                        int ksus2IPS = listAtrxIPS.get(1).Kasus;

                        String jurusanIPS = "";

                        if (ksus1IPS >= ksus2IPS && separateAtrIPS.equals("A")) {

                            jurusanIPS = "IPA";

                        } else if (ksus1IPS >= ksus2IPS && separateAtrIPS.equals("B")) {

                            jurusanIPS = "IPA";

                        } else if (ksus1IPS >= ksus2IPS && separateAtrIPS.equals("C")) {
                            jurusanIPS = "IPS";

                        } else if (ksus2IPS >= ksus1IPS && separateAtrIPS.equals("A")) {
                            jurusanIPS = "IPS";

                        } else if (ksus2IPS >= ksus1IPS && separateAtrIPS.equals("B")) {
                            jurusanIPS = "IPS";

                        } else if (ksus2IPS >= ksus1IPS && separateAtrIPS.equals("C")) {
                            jurusanIPS = "IPS";
                        }

                        String rule2 = "IF " + kodeAtr + " AND " + atrSecondIPS + " THEN " + jurusanIPS;

                        listRules.add(rule2);

                    }
                    break;
                }
                //============BATAS RULES 2

                String firstIPS = kodeAtr;
                String secondIPS = atribut2IPS;

                ArrayList<aturan> listAturanTblIPS = new ArrayList<>();

                for (int a = 0; a < arrCase22IPS.length; a++) {

                    String minatzIPS = arrCase22IPS[a];

                    for (int b = 0; b < listAtrIPS.size(); b++) {

                        String atrxxIPS = listAtrIPS.get(b).toString();

                        int jmlDataIPS = ia.CountKasus3(kodeAtr, atribut2IPS, atrxxIPS, minatzIPS);

                        DefaultTableModel modelTblIPS = (DefaultTableModel) jTable6.getModel();

                        Object rowTblIPS[] = new Object[3];

                        rowTblIPS[0] = atrxxIPS;
                        rowTblIPS[1] = minatzIPS;
                        rowTblIPS[2] = jmlDataIPS;

                        modelTblIPS.addRow(rowTblIPS);

                        aturanx = new aturan();

                        int totx = 0;

                        aturanx.Atribut = atrxxIPS;
                        aturanx.Minat = minatzIPS;
                        aturanx.Kasus = jmlDataIPS;

                        listAturanTblIPS.add(aturanx);

                    }

                }

                ArrayList<aturan> newListAturanIPS = new ArrayList<>();
                ArrayList<AturanEntropi> aturanEntropiIPS = new ArrayList<>();
                ArrayList<aturan> listTblIPS = new ArrayList<>();
                ArrayList<gain> gainList2IPS = new ArrayList<>();
                ArrayList<AturanEntropi> atrEntThirdNolIPS = new ArrayList<>();

                for (int j = 0; j < arrCase22IPS.length; j++) {

                    String minatZIPS = arrCase22IPS[j];

                    Collection<aturan> resultxxIPS = listAturanTblIPS.stream()
                    .filter(a -> Objects.equals(a.Minat, minatZIPS))
                    .collect(Collectors.toList());

                    listTblIPS = resultxxIPS.stream().collect(toCollection(ArrayList::new));

                    int totKasusIPS = 0;

                    for (int a = 0; a < listTblIPS.size(); a++) {

                        totKasusIPS += listTblIPS.get(a).Kasus;

                    }

                    int totalIPS = totKasusIPS;

                    if (minatZIPS.equals("IPA")) {
                        txtTotIpa2.setText(String.valueOf(total));
                    } else {
                        txtTotIps2.setText(String.valueOf(total));
                    }

                    totKasusIPS = 0;

                }

                //total entropi:
                int totKasus2IPS = Integer.parseInt(txtTotIpa2.getText()) + Integer.parseInt(txtTotIps2.getText());
                txtTotal2.setText(String.valueOf(totKasus2IPS));

                float divIpa2IPS = ((float) Integer.parseInt(txtTotIpa2.getText())) / totKasus2IPS;
                float divIps2IPS = ((float) Integer.parseInt(txtTotIps2.getText())) / totKasus2IPS;

                double logIpa2IPS = Math.log10(divIpa2IPS) / 0.3;
                double logIps2IPS = Math.log10(divIps2IPS) / 0.3;

                double entTotal2 = (((-divIpa2IPS) * logIpa2IPS) + ((-divIps2IPS) * logIps2IPS));

                txtEntropi2.setText(String.valueOf(entTotal2));
                //--------------------------------------------------------------

                //Menghitung entropi kembali
                String caseTbl2IPS = "";

                for (int a = 0; a < listTblIPS.size(); a++) {
                    caseTbl2IPS += listTblIPS.get(a).Atribut + ",";
                }

                String lastWordIPS = caseTbl2IPS.substring(0, caseTbl2IPS.length() - 1);

                String[] atrCaseTbl2IPS = lastWordIPS.split(",", -1);

                for (int z = 0; z < atrCaseTbl2IPS.length; z++) {

                    String atributCase2IPS = atrCaseTbl2IPS[z];

                    Collection<aturan> resultxIPS = listAturanTblIPS.stream()
                    .filter(a -> Objects.equals(a.Atribut, atributCase2IPS))
                    .collect(Collectors.toList());

                    int countIPS = newListIPS.size();

                    newListAturanIPS = resultxIPS.stream().collect(toCollection(ArrayList::new));

                    int totKasusIPS = 0;

                    for (int a = 0; a < newListAturanIPS.size(); a++) {

                        int kasusIPS = newListAturanIPS.get(a).Kasus;
                        totKasusIPS += kasusIPS;

                    }

                    double hasilIPS = 0.0;

                    for (int a = 0; a < newListAturanIPS.size(); a++) {

                        ateIPS = new AturanEntropi();

                        String atrNewIPS = newListAturanIPS.get(a).Atribut;
                        int kasusIPS = newListAturanIPS.get(a).Kasus;

                        ateIPS.atribut = atrNewIPS;

                        if (kasusIPS == 0) {
                            ateIPS.entropi = 0.0;

                        } else {

                            float ent2IPAIPS = ((float) kasusIPS) / totKasusIPS;

                            double logEnt2IPS = Math.log10(ent2IPAIPS) / 0.3;

                            double kaliIPS = ((-ent2IPAIPS) * logEnt2IPS);

                            hasilIPS += kaliIPS;

                        }
                    }

                    ateIPS.entropi = hasilIPS;

                    aturanEntropiIPS.add(ateIPS);

                    if (hasilIPS == 0.0) {
                        atrEntThirdNolIPS.add(ateIPS);
                    }

                    DefaultTableModel modelTblIPS = (DefaultTableModel) jTable7.getModel();

                    Object rowTblIPS[] = new Object[2];

                    rowTblIPS[0] = ateIPS.atribut;
                    rowTblIPS[1] = ateIPS.entropi;

                    modelTblIPS.addRow(rowTblIPS);

                    int totalKasusIPS = 0;

                    String atribtIPS = "";

                    //MENCARI GAIN
                    for (int a = 0; a < newListAturanIPS.size(); a++) {

                        atributIPS = newListAturanIPS.get(a).Atribut;
                        int kasusIPS = newListAturanIPS.get(a).Kasus;
                        totalKasusIPS += kasusIPS;

                    }

                    double gain1IPS= (((float) totalKasusIPS / Integer.parseInt(txtTotal2.getText())) * hasilIPS);

                    gn = new gain();
                    gn.Atribut = atributIPS;
                    gn.Nilai = gain1IPS;

                    gainList2IPS.add(gn);

                }

                double totResIPS = 0.0;

                ArrayList<gain> listGainer = new ArrayList<>();

                String atribtIPS = "IPA,IPS,MTK";
                String[] arrAtrbIPS = atribtIPS.split(",", -1);

                for (int x = 0; x < arrAtrbIPS.length; x++) {

                    String atrxxIPS = arrAtrbIPS[x];

                    Collection<gain> resultxIPS = gainList2IPS.stream()
                    .filter(a -> a.Atribut.startsWith(atrxxIPS))
                    .collect(Collectors.toList());

                    int countIPS = resultxIPS.size();

                    if (countIPS != 0) {

                        for (int a = 0; a < gainList2IPS.size(); a++) {

                            totResIPS += gainList2IPS.get(a).Nilai;

                        }

                        double totalEnt2IPS = Double.parseDouble(txtEntropi2.getText());

                        double formulaIPS = ((double) totalEnt2IPS - totResIPS);

                        gn = new gain();
                        gn.Atribut = atrxxIPS;
                        gn.Nilai = formulaIPS;

                        listGainer.add(gn);

                        DefaultTableModel modelTblIPS = (DefaultTableModel) jTable8.getModel();

                        Object rowTblIPS[] = new Object[2];

                        rowTblIPS[0] = gn.Atribut;
                        rowTblIPS[1] = gn.Nilai;

                        modelTblIPS.addRow(rowTblIPS);

                    }

                }

                //Rules3
                ArrayList<AturanEntropi> listThirdRulesIPS = new ArrayList<>();

                listThirdRulesIPS = atrEntThirdNolIPS;

                ArrayList<aturan> listAturan3IPS = new ArrayList<>();

                for (int a = 0; a < aturanEntropiIPS.size(); a++) {

                    String atr3IPS = aturanEntropiIPS.get(a).atribut;

                    String lastNode3IPS = atr3IPS.substring(0, atr3IPS.length() - 1);

                    switch (lastNode3IPS) {

                        case "MTK":

                        String atrRulesIPS = atr3IPS;

                        String separateAtrIPS = atr3IPS.substring(atr3IPS.length() - 1);

                        Collection<aturan> rsultAtrIPS = listAturanTblIPS.stream()
                        .filter(x -> x.Atribut.equals(atrRulesIPS))
                        .collect(Collectors.toList());

                        listAturan3IPS= rsultAtrIPS.stream().collect(toCollection(ArrayList::new));

                        String mnt1 = listAtrxIPS.get(0).Minat;
                        int ksus1 = listAtrxIPS.get(0).Kasus;

                        String mnt2 = listAtrxIPS.get(1).Minat;
                        int ksus2 = listAtrxIPS.get(1).Kasus;

                        String jurusan = "";

                        if (ksus1 >= ksus2 && separateAtrIPS.equals("A")) {

                            jurusan = "IPA";

                        } else if (ksus1 >= ksus2 && separateAtrIPS.equals("B")) {

                            jurusan = "IPS";

                        } else if (ksus1 >= ksus2 && separateAtrIPS.equals("C")) {
                            jurusan = "IPS";

                        } else if (ksus2 >= ksus1 && separateAtrIPS.equals("A")) {
                            jurusan = "IPS";

                        } else if (ksus2 >= ksus1 && separateAtrIPS.equals("B")) {
                            jurusan = "IPS";

                        } else if (ksus2 >= ksus1 && separateAtrIPS.equals("C")) {
                            jurusan = "IPS";
                        }

                        String rule3 = "IF " + kodeAtr + " AND " + atribut2IPS + " AND " + atrRulesIPS + " THEN " + jurusan;

                        listRules.add(rule3);

                        break;
                        
                        case "IPA":

                        String atrRulesIPA = atr3IPS;

                        String separateAtrIPA = atr3IPS.substring(atr3IPS.length() - 1);

                        Collection<aturan> rsultAtrIPA = listAturanTblIPS.stream()
                        .filter(x -> x.Atribut.equals(atrRulesIPA))
                        .collect(Collectors.toList());

                        listAturan3IPS= rsultAtrIPA.stream().collect(toCollection(ArrayList::new));

                        String mnt1IPA = listAtrxIPS.get(0).Minat;
                        int ksus1IPA = listAtrxIPS.get(0).Kasus;

                        String mnt2IPA = listAtrxIPS.get(1).Minat;
                        int ksus2IPA = listAtrxIPS.get(1).Kasus;

                        String jurusanIPA = "";

                        if (ksus1IPA >= ksus2IPA && separateAtrIPA.equals("A")) {

                            jurusanIPA = "IPA";

                        } else if (ksus1IPA >= ksus2IPA && separateAtrIPA.equals("B")) {

                            jurusanIPA = "IPS";

                        } else if (ksus1IPA >= ksus2IPA && separateAtrIPA.equals("C")) {
                            jurusanIPA = "IPS";

                        } else if (ksus2IPA >= ksus1IPA && separateAtrIPA.equals("A")) {
                            jurusanIPA = "IPS";

                        } else if (ksus2IPA >= ksus1IPA && separateAtrIPA.equals("B")) {
                            jurusanIPA = "IPS";

                        } else if (ksus2IPA >= ksus1IPA && separateAtrIPA.equals("C")) {
                            jurusanIPA = "IPS";
                        }

                        String rule3IPA = "IF " + kodeAtr + " AND " + atribut2IPS + " AND " + atrRulesIPA + " THEN " + jurusanIPA;

                        listRules.add(rule3IPA);

                        break;
                    }
                }
            }

            String RulesIPS = "";

            for (int a = 0; a < listRules.size(); a++) {

                RulesIPS += listRules.get(a) + "\n\r";

            }

            jTextArea1.setText(RulesIPS);
            
            break;

            case "MTK":

            for (int i = 0; i < listMtk.size(); i++) {
                rowData[0] = "MTK ";
                rowData[1] = listMtk.get(i).Atribut;

                ket = lblKet.getText();
                kodeAtr = " MTK " + rowData[1];
                combine = ket + kodeAtr;
                lblKet.setText(combine);
            }

            for (int i = 0; i < listIpa.size(); i++) {
                rowData[0] = "IPA ";
                rowData[1] = listIpa.get(i).Atribut;
                rowData[2] = listIpa.get(i).JumlahKasus;
                rowData[3] = listIpa.get(i).Ipa;
                rowData[4] = listIpa.get(i).Ips;
                rowData[5] = listIpa.get(i).entropi;
                rowData[6] = listIpa.get(i).gain;
                model.addRow(rowData);
            }

            for (int i = 0; i < listIps.size(); i++) {
                rowData[0] = "IPS ";
                rowData[1] = listIps.get(i).Atribut;
                rowData[2] = listIps.get(i).JumlahKasus;
                rowData[3] = listIps.get(i).Ipa;
                rowData[4] = listIps.get(i).Ips;
                rowData[5] = listIps.get(i).entropi;
                rowData[6] = listIps.get(i).gain;
                model.addRow(rowData);
            }
            
            DefaultTableModel model2IPA = (DefaultTableModel) jTable3.getModel();

            Object rowData2IPA[] = new Object[3];

            DefaultTableModel model3IPA = (DefaultTableModel) jTable4.getModel();

            Object rowData3IPA[] = new Object[2];

            String mtkIPA = "IPA,IPS";

            String[] atrxIPA = mtkIPA.split(",", -1);

            for (int i = 0; i < minat.length; i++) {

                for (int k = 0; k < atrxIPA.length; k++) {

                    for (int j = 0; j < huruf.length; j++) {

                        String atribut1IPA = atrxIPA[k] + huruf[j];

                        int kasusIPA = ia.CountKasus(atribut1IPA, kodeAtr, minat[i]);

                        rowData2IPA[0] = atribut1IPA;
                        rowData2IPA[1] = minat[i];
                        rowData2IPA[2] = kasusIPA;

                        model2IPA.addRow(rowData2IPA);

                        aturanx = new aturan();

                        int totx = 0;

                        aturanx.Atribut = atribut1IPA;
                        aturanx.Minat = minat[i];
                        aturanx.Kasus = kasusIPA;

                        listAturan.add(aturanx);

                    }
                }

            }

            ArrayList<aturan> newListIPA = new ArrayList<>();
            AturanEntropi ateIPA = new AturanEntropi();
            ArrayList<AturanEntropi> aturanEntIPA = new ArrayList<>();
            ArrayList<aturan> listTIPA = new ArrayList<>();

            AturanEntropiNol ateNolIPA = new AturanEntropiNol();
            ArrayList<AturanEntropi> aturanEntNolIPA = new ArrayList<>();

            ArrayList<gain> listGainTahap2IPA = new ArrayList<gain>();
            gain gnIPA = new gain();

            String case22IPA = "IPA,IPS";
            String[] arrCase22IPA = case22IPA.split(",", -1);

            for (int j = 0; j < arrCase22IPA.length; j++) {

                String axIPA = arrCase22IPA[j];

                Collection<aturan> resultxx = listAturan.stream()
                .filter(a -> Objects.equals(a.Minat, axIPA))
                .collect(Collectors.toList());

                listTIPA = resultxx.stream().collect(toCollection(ArrayList::new));

                int totKasusIpaIPA = 0;

                for (int a = 0; a < listTIPA.size(); a++) {

                    totKasusIpaIPA += listTIPA.get(a).Kasus;

                }

                int aacIPA = totKasusIpaIPA / 2;

                if (axIPA.equals("IPA")) {
                    txtTotIpa.setText(String.valueOf(aacIPA));
                } else {
                    txtTotIps.setText(String.valueOf(aacIPA));
                }

                totKasusIpaIPA = 0;

            }

            //total entropi:
            int totKasoesIPA = Integer.parseInt(txtTotIpa.getText()) + Integer.parseInt(txtTotIps.getText());
            txtTotal.setText(String.valueOf(totKasoesIPA));

            float divIpaIPA = ((float) Integer.parseInt(txtTotIpa.getText())) / totKasoesIPA;
            float divIpsIPA = ((float) Integer.parseInt(txtTotIps.getText())) / totKasoesIPA;

            double logIpaIPA = Math.log10(divIpaIPA) / 0.3;
            double logIpsIPA = Math.log10(divIpsIPA) / 0.3;

            double entTotalIPA = (((-divIpaIPA) * logIpaIPA) + ((-divIpsIPA) * logIpsIPA));

            txtEntropi.setText(String.valueOf(entTotalIPA));
            //--------------------------------------------------------------

            String case2IPA = "IPAA,IPAB,IPAC,IPSA,IPSB,IPSC";

            int kasus2IPA = 0;

            String[] atrCase2IPA = case2IPA.split(",", -1);

            for (int z = 0; z < atrCase2IPA.length; z++) {

                String atributCase2IPA = atrCase2IPA[z];

                Collection<aturan> resultx = listAturan.stream()
                .filter(a -> Objects.equals(a.Atribut, atributCase2IPA))
                .collect(Collectors.toList());

                int countIPA = newListIPA.size();

                newListIPA = resultx.stream().collect(toCollection(ArrayList::new));

                int totKasusIPA = 0;

                for (int a = 0; a < newListIPA.size(); a++) {

                    int kasusIPA = newListIPA.get(a).Kasus;
                    totKasusIPA += kasusIPA;

                }

                double hasilIPA = 0.0;

                for (int a = 0; a < newListIPA.size(); a++) {

                    String atributIPA = newListIPA.get(a).Atribut;
                    int kasusIPA = newListIPA.get(a).Kasus;

                    ateIPA.atribut = atributIPA;

                    if (kasusIPA == 0) {
                        ateIPA.entropi = 0.0;
                    } else {

                        float ent2IPAIPA = ((float) kasusIPA) / totKasusIPA;

                        double logEnt2IPA = Math.log10(ent2IPAIPA) / 0.3;

                        double kaliIPA = ((-ent2IPAIPA) * logEnt2IPA);

                        hasilIPA += kaliIPA;

                    }
                }

                ateIPA.entropi = hasilIPA;

                aturanEntIPA.add(ateIPA);

                if (hasilIPA == 0.0) {
                    aturanEntNolIPA.add(ateIPA);
                }

                int totalKasusIPA = 0;

                String atributIPA = "";

                //MENCARI GAIN Tahap 2
                for (int a = 0; a < newListIPA.size(); a++) {

                    atributIPA = newListIPA.get(a).Atribut;
                    int kasusIPA = newListIPA.get(a).Kasus;
                    totalKasusIPA += kasusIPA;

                }

                double gain1IPA = (((float) totalKasusIPA / totKasoesIPA) * hasilIPA);

                gnIPA = new gain();
                gnIPA.Atribut = atributIPA;
                gnIPA.Nilai = gain1IPA;

                listGainTahap2IPA.add(gnIPA);

                //---------------
                int countListEntIPA = aturanEntIPA.size();

                rowData3IPA[0] = ateIPA.atribut;
                rowData3IPA[1] = ateIPA.entropi;

                model3IPA.addRow(rowData3IPA);

                ateIPA = new AturanEntropi();

            }

            DefaultTableModel model4IPA = (DefaultTableModel) jTable5.getModel();

            Object rowData4IPA[] = new Object[2];

            ArrayList<gain> gainInterimIPA = new ArrayList<>();

            String atributIPA = "IPA,IPS,MTK";
            String[] arrAtrIPA = atributIPA.split(",", -1);

            for (int x = 0; x < arrAtrIPA.length; x++) {

                String atrxxIPA = arrAtrIPA[x];

                Collection<gain> resultxIPA = listGainTahap2IPA.stream()
                .filter(a -> a.Atribut.startsWith(atrxxIPA))
                .collect(Collectors.toList());

                int countIPA = resultxIPA.size();

                if (countIPA != 0) {

                    gainInterimIPA = resultxIPA.stream().collect(toCollection(ArrayList::new));

                    double entropiTotalIPA = Double.parseDouble(txtEntropi.getText());

                    double totEntIPA = 0.0;

                    for (int a = 0; a < gainInterimIPA.size(); a++) {
                        totEntIPA += gainInterimIPA.get(a).Nilai;
                    }

                    double gain = entropiTotalIPA - totEntIPA;

                    rowData4IPA[0] = atrxxIPA;
                    rowData4IPA[1] = gain;

                    model4IPA.addRow(rowData4IPA);

                }
            }

            //TAHAP 3
            int countTblIPA = jTable5.getRowCount();
            double[] arrayGain2IPA = new double[countTblIPA];

            for (int a = 0; a < countTblIPA; a++) {
                double zzIPA = Double.parseDouble(jTable5.getValueAt(a, 1).toString());
                arrayGain2IPA[a] = zzIPA;

            }

            double max2IPA = arrayGain2IPA[0];
            double min2IPA = arrayGain2IPA[0];

            //mencari max gain
            for (int k = 0; k < arrayGain2IPA.length; k++) {
                if (arrayGain2IPA[k] >= max2IPA) {
                    max2IPA = arrayGain2IPA[k];

                } else if (arrayGain2IPA[k] <= min2IPA) {
                    min2IPA = arrayGain2IPA[k];
                }
            }

            double maxGainIPA = max2IPA;

            //mencari atribut berdasarkan gain max
            ArrayList<gain> gainListIPA = new ArrayList<gain>();
            ArrayList<aturan> atrnListIPA = new ArrayList<aturan>();

            Collection<gain> resultxzIPA = listGainTahap2IPA.stream()
            .filter(z -> z.Nilai == maxGainIPA)
            .collect(Collectors.toList());

            int countaIPA = resultxzIPA.size();

            if (countaIPA != 0) {

                gainListIPA = resultxzIPA.stream().collect(toCollection(ArrayList::new));

                String minat2IPA = "";
                String minatMinIPA = "";

                for (int a = 0; a < gainListIPA.size(); a++) {

                    minat2IPA = gainListIPA.get(a).Atribut;
                }

                String atribut2IPA = minat2IPA;

                ArrayList<gain> list2IPA = new ArrayList<gain>();

                ArrayList<String> listAtrIPA = new ArrayList<String>();

                for (int a = 0; a < gainInterimIPA.size(); a++) {

                    String atribut3IPA = gainInterimIPA.get(a).Atribut;

                    listAtrIPA.add(atribut3IPA);

                }

                lblKet2.setText("Mencari Gain dan Entropi Terhadap " + kodeAtr + " dan " + atribut2IPA);

                //Menentukan rules tahap 2
                ArrayList<AturanEntropi> listSecondRulesIPA = new ArrayList<>();

                String node2IPA = atribut2IPA;
                String lastNode2IPA = node2IPA.substring(0, node2IPA.length() - 1);

                Collection<AturanEntropi> rsultIPA = aturanEntNolIPA.stream()
                .filter(x -> x.atribut.startsWith(lastNode2IPA))
                .collect(Collectors.toList());

                listSecondRulesIPA = rsultIPA.stream().collect(toCollection(ArrayList::new));

                ArrayList<aturan> listAtrxIPA = new ArrayList<>();

                String atrSecondIPA = "";

                switch (lastNode2IPA) {
                    case "IPA":
                    for (int a = 0; a < listSecondRulesIPA.size(); a++) {

                        atrSecondIPA = listSecondRulesIPA.get(a).atribut;

                        String atrRulesIPA = atrSecondIPA;

                        String separateAtrIPA = atrSecondIPA.substring(atrSecondIPA.length() - 1);

                        Collection<aturan> rsultAtr = listAturan.stream()
                        .filter(x -> x.Atribut.equals(atrRulesIPA))
                        .collect(Collectors.toList());

                        listAtrxIPA = rsultAtr.stream().collect(toCollection(ArrayList::new));

                        String mnt1IPA = listAtrxIPA.get(0).Minat;
                        int ksus1IPA = listAtrxIPA.get(0).Kasus;

                        String mnt2IPA = listAtrxIPA.get(1).Minat;
                        int ksus2IPA = listAtrxIPA.get(1).Kasus;

                        String jurusanIPA = "";

                        if (ksus1IPA >= ksus2IPA && separateAtrIPA.equals("A")) {

                            jurusanIPA = "IPA";

                        } else if (ksus1IPA >= ksus2IPA && separateAtrIPA.equals("B")) {

                            jurusanIPA = "IPA";

                        } else if (ksus1IPA >= ksus2IPA && separateAtrIPA.equals("C")) {
                            jurusanIPA = "IPS";

                        } else if (ksus2IPA >= ksus1IPA && separateAtrIPA.equals("A")) {
                            jurusanIPA = "IPA";

                        } else if (ksus2IPA >= ksus1IPA && separateAtrIPA.equals("B")) {
                            jurusanIPA = "IPA";

                        } else if (ksus2IPA >= ksus1IPA && separateAtrIPA.equals("C")) {
                            jurusanIPA = "IPS";
                        }

                        String rule2IPA = "IF " + kodeAtr + " AND " + atrSecondIPA + " THEN " + jurusanIPA;

                        listRules.add(rule2IPA);

                    }
                    break;

                    case "IPS":
                    for (int a = 0; a < listSecondRulesIPA.size(); a++) {

                        atrSecondIPA = listSecondRulesIPA.get(a).atribut;

                        String atrRulesIPA = atrSecondIPA;

                        String separateAtrIPA = atrSecondIPA.substring(atrSecondIPA.length() - 1);

                        Collection<aturan> rsultAtrIPA = listAturan.stream()
                        .filter(x -> x.Atribut.equals(atrRulesIPA))
                        .collect(Collectors.toList());

                        listAtrxIPA = rsultAtrIPA.stream().collect(toCollection(ArrayList::new));

                        String mnt1IPA = listAtrxIPA.get(0).Minat;
                        int ksus1IPA = listAtrxIPA.get(0).Kasus;

                        String mnt2IPA = listAtrxIPA.get(1).Minat;
                        int ksus2IPA = listAtrxIPA.get(1).Kasus;

                        String jurusanIPA = "";

                        if (ksus1IPA >= ksus2IPA && separateAtrIPA.equals("A")) {

                            jurusanIPA = "IPA";

                        } else if (ksus1IPA >= ksus2IPA && separateAtrIPA.equals("B")) {

                            jurusanIPA = "IPA";

                        } else if (ksus1IPA >= ksus2IPA && separateAtrIPA.equals("C")) {
                            jurusanIPA = "IPA";

                        } else if (ksus2IPA >= ksus1IPA && separateAtrIPA.equals("A")) {
                            jurusanIPA = "IPS";

                        } else if (ksus2IPA >= ksus1IPA && separateAtrIPA.equals("B")) {
                            jurusanIPA = "IPS";

                        } else if (ksus2IPA >= ksus1IPA && separateAtrIPA.equals("C")) {
                            jurusanIPA = "IPS";
                        }

                        String rule2IPA = "IF " + kodeAtr + " AND " + atrSecondIPA + " THEN " + jurusanIPA;

                        listRules.add(rule2IPA);

                    }
                    break;

                    case "MTK":
                    for (int a = 0; a < listSecondRulesIPA.size(); a++) {

                        atrSecondIPA = listSecondRulesIPA.get(a).atribut;

                        String atrRulesIPA = atrSecondIPA;

                        String separateAtrIPA = atrSecondIPA.substring(atrSecondIPA.length() - 1);

                        Collection<aturan> rsultAtrIPA = listAturan.stream()
                        .filter(x -> x.Atribut.equals(atrRulesIPA))
                        .collect(Collectors.toList());

                        listAtrxIPA = rsultAtrIPA.stream().collect(toCollection(ArrayList::new));

                        String mnt1IPA = listAtrxIPA.get(0).Minat;
                        int ksus1IPA = listAtrxIPA.get(0).Kasus;

                        String mnt2IPA = listAtrxIPA.get(1).Minat;
                        int ksus2IPA = listAtrxIPA.get(1).Kasus;

                        String jurusanIPA = "";

                        if (ksus1IPA >= ksus2IPA && separateAtrIPA.equals("A")) {

                            jurusanIPA = "IPA";

                        } else if (ksus1IPA >= ksus2IPA && separateAtrIPA.equals("B")) {

                            jurusanIPA = "IPA";

                        } else if (ksus1IPA >= ksus2IPA && separateAtrIPA.equals("C")) {
                            jurusanIPA = "IPS";

                        } else if (ksus2IPA >= ksus1IPA && separateAtrIPA.equals("A")) {
                            jurusanIPA = "IPS";

                        } else if (ksus2IPA >= ksus1IPA && separateAtrIPA.equals("B")) {
                            jurusanIPA = "IPS";

                        } else if (ksus2IPA >= ksus1IPA && separateAtrIPA.equals("C")) {
                            jurusanIPA = "IPS";
                        }

                        String rule2IPA = "IF " + kodeAtr + " AND " + atrSecondIPA + " THEN " + jurusanIPA;

                        listRules.add(rule2IPA);

                    }
                    break;
                }
                //============BATAS RULES 2

                String firstIPA = kodeAtr;
                String secondIPA = atribut2IPA;

                ArrayList<aturan> listAturanTblIPA = new ArrayList<>();

                for (int a = 0; a < arrCase22IPA.length; a++) {

                    String minatzIPA = arrCase22IPA[a];

                    for (int b = 0; b < listAtrIPA.size(); b++) {

                        String atrxxIPA = listAtrIPA.get(b).toString();

                        int jmlDataIPA = ia.CountKasus3(kodeAtr, atribut2IPA, atrxxIPA, minatzIPA);

                        DefaultTableModel modelTblIPA = (DefaultTableModel) jTable6.getModel();

                        Object rowTblIPA[] = new Object[3];

                        rowTblIPA[0] = atrxxIPA;
                        rowTblIPA[1] = minatzIPA;
                        rowTblIPA[2] = jmlDataIPA;

                        modelTblIPA.addRow(rowTblIPA);

                        aturanx = new aturan();

                        int totx = 0;

                        aturanx.Atribut = atrxxIPA;
                        aturanx.Minat = minatzIPA;
                        aturanx.Kasus = jmlDataIPA;

                        listAturanTblIPA.add(aturanx);

                    }

                }

                ArrayList<aturan> newListAturanIPA = new ArrayList<>();
                ArrayList<AturanEntropi> aturanEntropiIPA = new ArrayList<>();
                ArrayList<aturan> listTblIPA = new ArrayList<>();
                ArrayList<gain> gainList2IPA = new ArrayList<>();
                ArrayList<AturanEntropi> atrEntThirdNolIPA = new ArrayList<>();

                for (int j = 0; j < arrCase22IPA.length; j++) {

                    String minatZIPA = arrCase22IPA[j];

                    Collection<aturan> resultxx = listAturanTblIPA.stream()
                    .filter(a -> Objects.equals(a.Minat, minatZIPA))
                    .collect(Collectors.toList());

                    listTblIPA = resultxx.stream().collect(toCollection(ArrayList::new));

                    int totKasusIPA = 0;

                    for (int a = 0; a < listTblIPA.size(); a++) {

                        totKasusIPA += listTblIPA.get(a).Kasus;

                    }

                    int totalIPA = totKasusIPA;

                    if (minatZIPA.equals("IPA")) {
                        txtTotIpa2.setText(String.valueOf(total));
                    } else {
                        txtTotIps2.setText(String.valueOf(total));
                    }

                    totKasusIPA = 0;

                }

                //total entropi:
                int totKasus2IPA = Integer.parseInt(txtTotIpa2.getText()) + Integer.parseInt(txtTotIps2.getText());
                txtTotal2.setText(String.valueOf(totKasus2IPA));

                float divIpa2IPA = ((float) Integer.parseInt(txtTotIpa2.getText())) / totKasus2IPA;
                float divIps2IPA = ((float) Integer.parseInt(txtTotIps2.getText())) / totKasus2IPA;

                double logIpa2IPA = Math.log10(divIpa2IPA) / 0.3;
                double logIps2IPA = Math.log10(divIps2IPA) / 0.3;

                double entTotal2IPA = (((-divIpa2IPA) * logIpa2IPA) + ((-divIps2IPA) * logIps2IPA));

                txtEntropi2.setText(String.valueOf(entTotal2IPA));
                //--------------------------------------------------------------

                //Menghitung entropi kembali
                String caseTbl2IPA = "";

                for (int a = 0; a < listTblIPA.size(); a++) {
                    caseTbl2IPA += listTblIPA.get(a).Atribut + ",";
                }

                String lastWordIPA = caseTbl2IPA.substring(0, caseTbl2IPA.length() - 1);

                String[] atrCaseTbl2IPA = lastWordIPA.split(",", -1);

                for (int z = 0; z < atrCaseTbl2IPA.length; z++) {

                    String atributCase2IPA = atrCaseTbl2IPA[z];

                    Collection<aturan> resultxIPA = listAturanTblIPA.stream()
                    .filter(a -> Objects.equals(a.Atribut, atributCase2IPA))
                    .collect(Collectors.toList());

                    int countIPA = newListIPA.size();

                    newListAturanIPA = resultxIPA.stream().collect(toCollection(ArrayList::new));

                    int totKasusIPA = 0;

                    for (int a = 0; a < newListAturanIPA.size(); a++) {

                        int kasusIPA = newListAturanIPA.get(a).Kasus;
                        totKasusIPA += kasusIPA;

                    }

                    double hasilIPA = 0.0;

                    for (int a = 0; a < newListAturanIPA.size(); a++) {

                        ateIPA = new AturanEntropi();

                        String atrNewIPA = newListAturanIPA.get(a).Atribut;
                        int kasusIPA = newListAturanIPA.get(a).Kasus;

                        ateIPA.atribut = atrNewIPA;

                        if (kasusIPA == 0) {
                            ateIPA.entropi = 0.0;

                        } else {

                            float ent2IPAIPA = ((float) kasusIPA) / totKasusIPA;

                            double logEnt2IPA = Math.log10(ent2IPAIPA) / 0.3;

                            double kaliIPA = ((-ent2IPAIPA) * logEnt2IPA);

                            hasilIPA += kaliIPA;

                        }
                    }

                    ateIPA.entropi = hasilIPA;

                    aturanEntropiIPA.add(ateIPA);

                    if (hasilIPA == 0.0) {
                        atrEntThirdNolIPA.add(ateIPA);
                    }

                    DefaultTableModel modelTblIPA = (DefaultTableModel) jTable7.getModel();

                    Object rowTblIPA[] = new Object[2];

                    rowTblIPA[0] = ateIPA.atribut;
                    rowTblIPA[1] = ateIPA.entropi;

                    modelTblIPA.addRow(rowTblIPA);

                    int totalKasusIPA = 0;

                    String atribtIPA = "";

                    //MENCARI GAIN
                    for (int a = 0; a < newListAturanIPA.size(); a++) {

                        atributIPA = newListAturanIPA.get(a).Atribut;
                        int kasusIPA = newListAturanIPA.get(a).Kasus;
                        totalKasusIPA += kasusIPA;

                    }

                    double gain1IPA = (((float) totalKasusIPA / Integer.parseInt(txtTotal2.getText())) * hasilIPA);

                    gn = new gain();
                    gn.Atribut = atributIPA;
                    gn.Nilai = gain1IPA;

                    gainList2IPA.add(gn);

                }

                double totResIPA = 0.0;

                ArrayList<gain> listGainerIPA = new ArrayList<>();

                String atribtIPA = "IPA,IPS,MTK";
                String[] arrAtrbIPA = atribtIPA.split(",", -1);

                for (int x = 0; x < arrAtrbIPA.length; x++) {

                    String atrxxIPA = arrAtrbIPA[x];

                    Collection<gain> resultxIPA = gainList2IPA.stream()
                    .filter(a -> a.Atribut.startsWith(atrxxIPA))
                    .collect(Collectors.toList());

                    int countIPA = resultxIPA.size();

                    if (countIPA != 0) {

                        for (int a = 0; a < gainList2IPA.size(); a++) {

                            totResIPA += gainList2IPA.get(a).Nilai;

                        }

                        double totalEnt2IPA = Double.parseDouble(txtEntropi2.getText());

                        double formulaIPA = ((double) totalEnt2IPA - totResIPA);

                        gn = new gain();
                        gn.Atribut = atrxxIPA;
                        gn.Nilai = formulaIPA;

                        listGainerIPA.add(gn);

                        DefaultTableModel modelTblIPA = (DefaultTableModel) jTable8.getModel();

                        Object rowTblIPA[] = new Object[2];

                        rowTblIPA[0] = gn.Atribut;
                        rowTblIPA[1] = gn.Nilai;

                        modelTblIPA.addRow(rowTblIPA);

                    }

                }

                //Rules3
                ArrayList<AturanEntropi> listThirdRulesIPA = new ArrayList<>();

                listThirdRulesIPA = atrEntThirdNolIPA;

                ArrayList<aturan> listAturan3IPA = new ArrayList<>();

                for (int a = 0; a < aturanEntropiIPA.size(); a++) {

                    String atr3IPA = aturanEntropiIPA.get(a).atribut;

                    String lastNode3IPA = atr3IPA.substring(0, atr3IPA.length() - 1);

                    switch (lastNode3IPA) {

                        case "MTK":

                        String atrRulesIPA = atr3IPA;

                        String separateAtrIPA = atr3IPA.substring(atr3IPA.length() - 1);

                        Collection<aturan> rsultAtr = listAturanTblIPA.stream()
                        .filter(x -> x.Atribut.equals(atrRulesIPA))
                        .collect(Collectors.toList());

                        listAturan3IPA = rsultAtr.stream().collect(toCollection(ArrayList::new));

                        String mnt1IPA = listAtrxIPA.get(0).Minat;
                        int ksus1IPA = listAtrxIPA.get(0).Kasus;

                        String mnt2IPA = listAtrxIPA.get(1).Minat;
                        int ksus2IPA = listAtrxIPA.get(1).Kasus;

                        String jurusanIPA = "";

                        if (ksus1IPA >= ksus2IPA && separateAtrIPA.equals("A")) {

                            jurusanIPA = "IPA";

                        } else if (ksus1IPA >= ksus2IPA && separateAtrIPA.equals("B")) {

                            jurusanIPA = "IPS";

                        } else if (ksus1IPA >= ksus2IPA && separateAtrIPA.equals("C")) {
                            jurusanIPA = "IPS";

                        } else if (ksus2IPA >= ksus1IPA && separateAtrIPA.equals("A")) {
                            jurusanIPA = "IPS";

                        } else if (ksus2IPA >= ksus1IPA && separateAtrIPA.equals("B")) {
                            jurusanIPA = "IPS";

                        } else if (ksus2IPA >= ksus1IPA && separateAtrIPA.equals("C")) {
                            jurusanIPA = "IPS";
                        }

                        String rule3 = "IF " + kodeAtr + " AND " + atribut2IPA + " AND " + atrRulesIPA + " THEN " + jurusanIPA;

                        listRules.add(rule3);

                        break;
                    }

                }
            }

            String RulesIPA = "";

            for (int a = 0; a < listRules.size(); a++) {

                RulesIPA += listRules.get(a) + "\n\r";

            }

            jTextArea1.setText(RulesIPA);
            
            break;
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormAturan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormAturan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormAturan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormAturan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormAturan().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField atributAkar;
    private javax.swing.JButton btnTambahAturan;
    private javax.swing.JTextField caseIPAA;
    private javax.swing.JTextField caseIPAAIPA;
    private javax.swing.JTextField caseIPAAIPS;
    private javax.swing.JTextField caseIPAB;
    private javax.swing.JTextField caseIPABIPA;
    private javax.swing.JTextField caseIPABIPS;
    private javax.swing.JTextField caseIPAC;
    private javax.swing.JTextField caseIPACIPA;
    private javax.swing.JTextField caseIPACIPS;
    private javax.swing.JTextField caseIPAGain;
    private javax.swing.JTextField caseIPSA;
    private javax.swing.JTextField caseIPSAEntropi;
    private javax.swing.JTextField caseIPSAIPA;
    private javax.swing.JTextField caseIPSAIPS;
    private javax.swing.JTextField caseIPSB;
    private javax.swing.JTextField caseIPSBEntropi;
    private javax.swing.JTextField caseIPSBIPA;
    private javax.swing.JTextField caseIPSBIPS;
    private javax.swing.JTextField caseIPSC;
    private javax.swing.JTextField caseIPSCEntropi;
    private javax.swing.JTextField caseIPSCIPA;
    private javax.swing.JTextField caseIPSCIPS;
    private javax.swing.JTextField caseIPSGain;
    private javax.swing.JTextField caseIpaAEntropi;
    private javax.swing.JTextField caseIpaBEntropi;
    private javax.swing.JTextField caseIpaCEntropi;
    private javax.swing.JTextField caseMTKA;
    private javax.swing.JTextField caseMTKAEntropi;
    private javax.swing.JTextField caseMTKAIPA;
    private javax.swing.JTextField caseMTKAIPS;
    private javax.swing.JTextField caseMTKB;
    private javax.swing.JTextField caseMTKBEntropi;
    private javax.swing.JTextField caseMTKBIPA;
    private javax.swing.JTextField caseMTKBIPS;
    private javax.swing.JTextField caseMTKC;
    private javax.swing.JTextField caseMTKCEntropi;
    private javax.swing.JTextField caseMTKCIPA;
    private javax.swing.JTextField caseMTKCIPS;
    private javax.swing.JTextField caseMTKGain;
    private javax.swing.JComboBox<String> cbAribut2;
    private javax.swing.JComboBox<String> cbAtribut1;
    private javax.swing.JComboBox<String> cbAtribut3;
    private javax.swing.JComboBox<String> cbMinat;
    private javax.swing.JTextField entropiTotal;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable11;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTable jTable6;
    private javax.swing.JTable jTable7;
    private javax.swing.JTable jTable8;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lblKet;
    private javax.swing.JLabel lblKet2;
    private javax.swing.JTextField nodeAkar;
    private javax.swing.JTextField totIPA;
    private javax.swing.JTextField totIPS;
    private javax.swing.JTextField total;
    private javax.swing.JTextField txtEntropi;
    private javax.swing.JTextField txtEntropi2;
    private javax.swing.JTextField txtTotIpa;
    private javax.swing.JTextField txtTotIpa2;
    private javax.swing.JTextField txtTotIps;
    private javax.swing.JTextField txtTotIps2;
    private javax.swing.JTextField txtTotal;
    private javax.swing.JTextField txtTotal2;
    // End of variables declaration//GEN-END:variables
}
